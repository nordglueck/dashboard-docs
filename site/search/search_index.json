{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About The project \"Dengue Dashboard\" is originally a part of the Bachelor Report of Jennifer Horstmann submitted to the faculty of Mathematics and Computer Science at the University of Bremen for the degree of Bachelor of Science. The system allows for management and visualizations of all relevant vital data for dengue fever patients as well as other parameters like the fuid balance. It is a web app that allows multiple clients to retrieve updates and notifications in real-time and therefore supports tele-consultation and timely interventions which are crucial in the treatment of dengue fever.","title":"Home"},{"location":"#about","text":"The project \"Dengue Dashboard\" is originally a part of the Bachelor Report of Jennifer Horstmann submitted to the faculty of Mathematics and Computer Science at the University of Bremen for the degree of Bachelor of Science. The system allows for management and visualizations of all relevant vital data for dengue fever patients as well as other parameters like the fuid balance. It is a web app that allows multiple clients to retrieve updates and notifications in real-time and therefore supports tele-consultation and timely interventions which are crucial in the treatment of dengue fever.","title":"About"},{"location":"00_tut_actions/","text":"Work with new data from the back end Attention More content coming soon.","title":"Work with new data from the back end"},{"location":"00_tut_actions/#work-with-new-data-from-the-back-end","text":"Attention More content coming soon.","title":"Work with new data from the back end"},{"location":"00_tut_api/","text":"New REST API Endpoint Model First we have to create a model. In this example a simple patient model. from django.db import models class Patient ( models . Model ): \"\"\" Patient instance. \"\"\" first_name = models . CharField ( max_length = 240 ) last_name = models . CharField ( max_length = 240 ) admission_date = models . DateTimeField () dismissal_date = models . DateTimeField ( blank = True , null = True ) created_at = models . DateTimeField ( auto_now_add = True ) updated_at = models . DateTimeField ( auto_now = True ) Serializer The second step is to serialize the model. To do so, we import the serializer from the Django Rest Framework and create a new Serializer Class, that inherits from the ModelSerializer. The base model for this serializer is the just created patient model. In the fields argument we may list all the fields we want to serialize. It is also possible to define __all__ or exclude certain fields. from rest_framework import serializers from dashboard.patients.models import Patient class PatientSerializer ( serializers . ModelSerializer ): class Meta : model = Patient fields = [ \"id\" , \"first_name\" , \"last_name\" , \"admission_date\" , \"dismissal_date\" , \"updated_at\" , \"created_at\" ] View To be able to see the serialized data, search through it and refer to the endpoint via a link, a view needs to be set up. A fairly minimalistic setup looks something like this. The ModelViewSet is imported from the Django Rest Framework and the Base for the ViewSet. The serializer is the one we just created and the queryset may be more simple but in this way shows the possibility to create more custom functions to define the queryset. An alternative to the queryset definition below would be to write queryset = Patient.objects.all().order_by('-admission_date') right beneath the serializer_class and leaving out the method get_queryset . from rest_framework.viewsets import ModelViewSet from dashboard.patients.api.serializers import PatientSerializer from dashboard.patients.models import Patient class PatientViewSet ( ModelViewSet ): \"\"\" This view returns a list of all patients in the systems ordered by their admission date. \"\"\" serializer_class = PatientSerializer def get_queryset ( self ): queryset = Patient . objects . all () queryset = queryset . order_by ( '-admission_date' ) return queryset Info If you take a look at the Definition of ModelViewSet : class ModelViewSet(mixins.CreateModelMixin, mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin, mixins.ListModelMixin, GenericViewSet): \"\"\" A viewset that provides default `create()`, `retrieve()`, `update()`, `partial_update()`, `destroy()` and `list()` actions. \"\"\" You can see, that it provides create, retrieve, update, delete and list functions, just as you would expect a REST API to. If you prefer a more specific definition, e.g. an endpoint with just the list action, you may wanna consider to only use the ListModelMixin instead of the ModelViewSet . URLs Finally, we have to define a route for the api. The string we define here will be the string that follows the /api/ . So in this case, our new route, that is connected to the PatientViewSet that we created in the previous step is www.example.com/api/patients/ from django.urls import path , include from rest_framework.routers import DefaultRouter from dashboard.patients.api.views import PatientViewSet router = DefaultRouter () router . register ( r \"patients\" , PatientViewSet , basename = \"patients\" ) urlpatterns = [ path ( \"\" , include ( router . urls )), ] Results Browsable API /api/patients/ At the /api endpoint you can find the Browsable API with all exposed endpoints. The data of our newly created endpoint can be seen at /api/patients/ and will show a list of all the instances of a patient model with all the fields defined in the serializer. Swagger API Documentation /swagger The Swagger API Documentation also shows all the currently available endpoints, but focuses more on the specification of the endpoints rather than on the data itself. However, the saved instances of a model can be obtained through the interactive mode of swagger, where you can request data from any endpoint or even post data to an endpoint.","title":"New REST API Endpoint"},{"location":"00_tut_api/#new-rest-api-endpoint","text":"","title":"New REST API Endpoint"},{"location":"00_tut_api/#model","text":"First we have to create a model. In this example a simple patient model. from django.db import models class Patient ( models . Model ): \"\"\" Patient instance. \"\"\" first_name = models . CharField ( max_length = 240 ) last_name = models . CharField ( max_length = 240 ) admission_date = models . DateTimeField () dismissal_date = models . DateTimeField ( blank = True , null = True ) created_at = models . DateTimeField ( auto_now_add = True ) updated_at = models . DateTimeField ( auto_now = True )","title":"Model"},{"location":"00_tut_api/#serializer","text":"The second step is to serialize the model. To do so, we import the serializer from the Django Rest Framework and create a new Serializer Class, that inherits from the ModelSerializer. The base model for this serializer is the just created patient model. In the fields argument we may list all the fields we want to serialize. It is also possible to define __all__ or exclude certain fields. from rest_framework import serializers from dashboard.patients.models import Patient class PatientSerializer ( serializers . ModelSerializer ): class Meta : model = Patient fields = [ \"id\" , \"first_name\" , \"last_name\" , \"admission_date\" , \"dismissal_date\" , \"updated_at\" , \"created_at\" ]","title":"Serializer"},{"location":"00_tut_api/#view","text":"To be able to see the serialized data, search through it and refer to the endpoint via a link, a view needs to be set up. A fairly minimalistic setup looks something like this. The ModelViewSet is imported from the Django Rest Framework and the Base for the ViewSet. The serializer is the one we just created and the queryset may be more simple but in this way shows the possibility to create more custom functions to define the queryset. An alternative to the queryset definition below would be to write queryset = Patient.objects.all().order_by('-admission_date') right beneath the serializer_class and leaving out the method get_queryset . from rest_framework.viewsets import ModelViewSet from dashboard.patients.api.serializers import PatientSerializer from dashboard.patients.models import Patient class PatientViewSet ( ModelViewSet ): \"\"\" This view returns a list of all patients in the systems ordered by their admission date. \"\"\" serializer_class = PatientSerializer def get_queryset ( self ): queryset = Patient . objects . all () queryset = queryset . order_by ( '-admission_date' ) return queryset Info If you take a look at the Definition of ModelViewSet : class ModelViewSet(mixins.CreateModelMixin, mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin, mixins.ListModelMixin, GenericViewSet): \"\"\" A viewset that provides default `create()`, `retrieve()`, `update()`, `partial_update()`, `destroy()` and `list()` actions. \"\"\" You can see, that it provides create, retrieve, update, delete and list functions, just as you would expect a REST API to. If you prefer a more specific definition, e.g. an endpoint with just the list action, you may wanna consider to only use the ListModelMixin instead of the ModelViewSet .","title":"View"},{"location":"00_tut_api/#urls","text":"Finally, we have to define a route for the api. The string we define here will be the string that follows the /api/ . So in this case, our new route, that is connected to the PatientViewSet that we created in the previous step is www.example.com/api/patients/ from django.urls import path , include from rest_framework.routers import DefaultRouter from dashboard.patients.api.views import PatientViewSet router = DefaultRouter () router . register ( r \"patients\" , PatientViewSet , basename = \"patients\" ) urlpatterns = [ path ( \"\" , include ( router . urls )), ]","title":"URLs"},{"location":"00_tut_api/#results","text":"","title":"Results"},{"location":"00_tut_api/#browsable-api","text":"/api/patients/ At the /api endpoint you can find the Browsable API with all exposed endpoints. The data of our newly created endpoint can be seen at /api/patients/ and will show a list of all the instances of a patient model with all the fields defined in the serializer.","title":"Browsable API"},{"location":"00_tut_api/#swagger-api-documentation","text":"/swagger The Swagger API Documentation also shows all the currently available endpoints, but focuses more on the specification of the endpoints rather than on the data itself. However, the saved instances of a model can be obtained through the interactive mode of swagger, where you can request data from any endpoint or even post data to an endpoint.","title":"Swagger API Documentation"},{"location":"00_tut_page/","text":"Create a new page Attention More content coming soon.","title":"New Page"},{"location":"00_tut_page/#create-a-new-page","text":"Attention More content coming soon.","title":"Create a new page"},{"location":"00_tut_ws/","text":"New WebSocket Endpoint Attention More content coming soon.","title":"New WebSocket Endpoint"},{"location":"00_tut_ws/#new-websocket-endpoint","text":"Attention More content coming soon.","title":"New WebSocket Endpoint"},{"location":"02_Installation/","text":"Installation This page serves as an installation guide for local development of the Dengue Dashboard . The guide assumes, that the reader already cloned a recent repository of the project and navigated to the project root. The shown commands are executed from the command line in the root directory if not declared otherwise. 1. Back end: Django Getting Up and Running Locally With Docker Info The project is not required to run in a docker container. All of the processes involved could also be started manually. However, for simplicity and cross-platform development purposes, a docker environment is provided. The steps below will get you up and running with a local development environment. All of these commands assume you are in the root of your generated project. See also: https://github.com/pydanny/cookiecutter-django/ Prerequisites Docker; if you don't have it yet, follow the installation instructions ; Docker Compose; refer to the official documentation for the installation guide . Build the Stack This can take a while, especially the first time you run this particular command on your development system: docker-compose -f local.yml build Generally, if you want to emulate production environment use production.yml instead. And this is true for any other actions you might need to perform: whenever a switch is required, just do it! Run the Stack This brings up both Django and PostgreSQL. The first time it is run it might take a while to get started, but subsequent runs will occur quickly. Open a terminal at the project root and run the following for local development: docker-compose -f local.yml up You can also set the environment variable COMPOSE_FILE pointing to local.yml like this: export COMPOSE_FILE=local.yml And then run: docker-compose up To run in a detached (background) mode, just:: docker-compose up -d (Optionally) Designate your Docker Development Server IP When DEBUG is set to True , the host is validated against ['localhost', '127.0.0.1', '[::1]'] . This is adequate when running a virtualenv . For Docker, in the config.settings.local , add your host development server IP to INTERNAL_IPS or ALLOWED_HOSTS if the variable exists. Alternative: Virtual Environment for Python Prerequisites : Installation of Python 3, Pip, Django and a Unix/MacOS or Windows Machine As an alternative to Docker, the project can be developed in a virtual environment for python. To create a virtual environment, decide on a name, e.g. env_name and create on like so in a folder above or aside the project folder: python3 -m venv env_name To activate the virtual environment on a level above the environment folder that was just created: Mac OS / Linux source env_name/bin/activate Windows env_name\\Scripts\\activate.bat With the virtual environment at hand (and activated), the requirements for the projects can now be installed manually only to this environment: pip install requirements/local.txt For more information on virtual environments, please refer to the Python 3 tutorial: https://docs.python.org/3/tutorial/venv.html Besides Python and all the requirements (including Django), the following technologies have to be installed as well: npm redis postgres (this section has to be continued...) 2. Front end: Vue.js This app integrates with a Vue single page app (SPA) located in vue_frontend . To initialize the frontend, from the vue_frontend directory, run: npm install To serve the Vue frontend in hot-reloading development mode together with the back end : npm run serve And to build for deployment: npm run build Commands Execute Management Commands As with any shell command that we wish to run in our container, this is done using the docker-compose -f local.yml run --rm command: docker-compose -f local.yml run --rm django python manage.py migrate docker-compose -f local.yml run --rm django python manage.py createsuperuser Here, django is the target service we are executing the commands against. More on Docker and local development can be found in \"LOCAL_DEV.rst\".","title":"Installation"},{"location":"02_Installation/#installation","text":"This page serves as an installation guide for local development of the Dengue Dashboard . The guide assumes, that the reader already cloned a recent repository of the project and navigated to the project root. The shown commands are executed from the command line in the root directory if not declared otherwise.","title":"Installation"},{"location":"02_Installation/#1-back-end-django","text":"","title":"1. Back end: Django"},{"location":"02_Installation/#getting-up-and-running-locally-with-docker","text":"Info The project is not required to run in a docker container. All of the processes involved could also be started manually. However, for simplicity and cross-platform development purposes, a docker environment is provided. The steps below will get you up and running with a local development environment. All of these commands assume you are in the root of your generated project. See also: https://github.com/pydanny/cookiecutter-django/","title":"Getting Up and Running Locally With Docker"},{"location":"02_Installation/#prerequisites","text":"Docker; if you don't have it yet, follow the installation instructions ; Docker Compose; refer to the official documentation for the installation guide .","title":"Prerequisites"},{"location":"02_Installation/#build-the-stack","text":"This can take a while, especially the first time you run this particular command on your development system: docker-compose -f local.yml build Generally, if you want to emulate production environment use production.yml instead. And this is true for any other actions you might need to perform: whenever a switch is required, just do it!","title":"Build the Stack"},{"location":"02_Installation/#run-the-stack","text":"This brings up both Django and PostgreSQL. The first time it is run it might take a while to get started, but subsequent runs will occur quickly. Open a terminal at the project root and run the following for local development: docker-compose -f local.yml up You can also set the environment variable COMPOSE_FILE pointing to local.yml like this: export COMPOSE_FILE=local.yml And then run: docker-compose up To run in a detached (background) mode, just:: docker-compose up -d","title":"Run the Stack"},{"location":"02_Installation/#optionally-designate-your-docker-development-server-ip","text":"When DEBUG is set to True , the host is validated against ['localhost', '127.0.0.1', '[::1]'] . This is adequate when running a virtualenv . For Docker, in the config.settings.local , add your host development server IP to INTERNAL_IPS or ALLOWED_HOSTS if the variable exists.","title":"(Optionally) Designate your Docker Development Server IP"},{"location":"02_Installation/#alternative-virtual-environment-for-python","text":"Prerequisites : Installation of Python 3, Pip, Django and a Unix/MacOS or Windows Machine As an alternative to Docker, the project can be developed in a virtual environment for python. To create a virtual environment, decide on a name, e.g. env_name and create on like so in a folder above or aside the project folder: python3 -m venv env_name To activate the virtual environment on a level above the environment folder that was just created: Mac OS / Linux source env_name/bin/activate Windows env_name\\Scripts\\activate.bat With the virtual environment at hand (and activated), the requirements for the projects can now be installed manually only to this environment: pip install requirements/local.txt For more information on virtual environments, please refer to the Python 3 tutorial: https://docs.python.org/3/tutorial/venv.html Besides Python and all the requirements (including Django), the following technologies have to be installed as well: npm redis postgres (this section has to be continued...)","title":"Alternative: Virtual Environment for Python"},{"location":"02_Installation/#2-front-end-vuejs","text":"This app integrates with a Vue single page app (SPA) located in vue_frontend . To initialize the frontend, from the vue_frontend directory, run: npm install To serve the Vue frontend in hot-reloading development mode together with the back end : npm run serve And to build for deployment: npm run build","title":"2. Front end: Vue.js"},{"location":"02_Installation/#commands","text":"","title":"Commands"},{"location":"02_Installation/#execute-management-commands","text":"As with any shell command that we wish to run in our container, this is done using the docker-compose -f local.yml run --rm command: docker-compose -f local.yml run --rm django python manage.py migrate docker-compose -f local.yml run --rm django python manage.py createsuperuser Here, django is the target service we are executing the commands against. More on Docker and local development can be found in \"LOCAL_DEV.rst\".","title":"Execute Management Commands"},{"location":"03_basics/","text":"Basics This page covers the overall basics of the project regarding the back end (Django) and the front end (Vue.js). The most important aspects to get started will be covered. More in-depth guides/knowledge for either of the parts is planned for a different page (tbd). System overview A brief overview over the system can be obtained from the following diagram: The following sections are going to offer a first insight into the respective areas: Quicklinks : The Back end (Django) The Front end (Vue.js) The Database (Postgresql) The Back end (Django) Model-View-Template (MVT) Django is following the Model-View-Template structure, where the Model is for structuring and manipulating the data of the application, the view implements the business logic and the templates serves the views to the clients. In this project, the templates are rendering the static files provided by the webpack bundling, that are moved into the static folder inside the back end directory after executing npm run build inside the vue_frontend directory. The principle of Django's MVT architecture is visualized in the following diagram: Source: https://cdn.askpython.com/wp-content/uploads/2020/08/image-23.png.webp Model The model of the application is to be found in the respective models.py file. See https://docs.djangoproject.com/en/3.2/topics/db/models for documentation on how to create Models and available Fields. All of the data of the model instances are saved to a PostgreSQL Database. Postgres integrates well with Django and Django even supports some fields exclusively for Postgres. See https://docs.djangoproject.com/en/3.2/ref/contrib/postgres/ View The view implements the business logic of the application. In the patients/api/views.py , the REST API endpoints are defined. The most important endpoints that are exposed as of the end of the thesis are: Endpoint Actions (REST) Description /api/patients/ GET, POST List view of all patients /api/patients/id/ GET, PUT, PATCH, DELETE Detail view of a single patient /api/reports/ GET, POST List view of all reports /api/reports/id/ GET, PUT, PATCH, DELETE Detail view of a single report /rest-auth/login/ POST Login with username and password /rest-auth/logout/ POST Logout and delete token /rest-auth/user/ GET Retrieve user information A full documentation of all available endpoints as well as an interactive demo of the endpoints can be obtained from the endpoint /swagger . Curl commands can be interactively executed on the page and requests and responses can be analysed. The fields, that are to be included (or excluded) in the respective JSON responses are defined in the patients/api/serializers.py file. Attention The front end of this application works with data provided through WebSockets . The aforementioned REST API endpoints are delivered via HTTP and useful for the integration of other services. The communication between the back end and the front end is mostly based on WebSockets however. WebSockets allow for full-duplex communication, meaning that both, the back end and the front end can send each other messages whenever they need to. Without the other one asking for it. This enables a real-time behaviour in the front end and works well together with the reactivity of Vue.js. However there is some data, that doesn't need to be transferred via WebSockets, like the authentication data. This data is handled using HTTP REST on both sides. The following diagram illustrates the usage of HTTP and WebSockets: With the WebSocket integration, the endpoints for WebSocket requests are defined like so: Stream Consumer Model Actions (REST-like) patients PatientConsumer Patient List, Retrieve, Create, Patch, Update, Delete reports ReportConsumer Report List, Retrieve, Create, Patch, Update, Delete history HistoryConsumer HistoricalReport List, Retrieve, Patch, Update, Delete The endpoints are defined in the asgi.py file of the Project. For more information see Routing . Template Routing The following code snippet from the asgi.py file shows the ProtocolTypeRouter that routes the HTTP and WebSocket requests according to their protocol types: application = ProtocolTypeRouter ({ \"http\" : get_asgi_application (), \"websocket\" : TokenAuthMiddlewareStack ( URLRouter ( [ re_path ( r \"^ws/$\" , AsyncJsonWebsocketDemultiplexer ( patients = PatientConsumer () . as_asgi (), reports = ReportConsumer () . as_asgi (), history = HistoryConsumer () . as_asgi (), ) . as_asgi ()), ] ) ), }) The streams are defined inside the Demultiplexer and connected to their respective consumer (see Consumer ). REST API The REST API endpoints are defined as described before (see View ). An endpoint definition consists of several files: patients/models.py patients/api/serializers.py patients/api/views.py patients/api/urls.py The files are to be created/updated in the order shown above. The model is the first thing, as it is the base to what will be possible to expose via an API endpoint. The serializer defines which fields are to be included or excluded into the serialized JSON response and is based on the model. The view is handling the serialized JSON and able to add orderings to the data or filters. Besides the textual JSON output of every response, the Django REST Framework is also serving a browsable API with web pages, where one can create, update and delete model instances inside the browser. To be able to request the endpoints via the given URLs, the created Views have to be registered and named in the patients/api/urls.py file. WebSocket Endpoints The REST API endpoints are defined as described before (see View ). A WebSocket endpoint needs a REST API endpoint as a base. On top of that, two additional files have to be modified: patients/consumers.py config/asgi.py The consumers define the business logic for the clients connected to the WebSocket. In asgi.py , a consumer is being attached to a stream and therefore a URL is being created to which the clients may connect from e.g. the front end. Consumer Consumers are an important part of the definition of WebSocket endpoints in this application. Consumers contain the business logic that is relevant for the clients, that are connected to the WebSocket. The behaviour for the connection setup or the disconnecion may be defined as well as - and especially - the behaviour for when the client is connected to the WebSocket. What kind of messages should be sent to the client? What format should the messages have? Should the messages be sent to all connected clients or just to specific ones? When should the message be sent? These are the most relevant questions, but there are many more. To summarize, how consumers work as of now (June 2021) in this application: Every relevant model, i.e. Patient , Report and ReportHistory has their own consumer. The querysets and serializers are set to the ones of the REST API endpoints. In addition, an observer model is implemented to make sure, that every change that is made to a model is reflected to all connected clients . This holds for all of the mentioned models. Because of the set serializers, the messages will display as defined in the REST API configuration. For the history model, there is an additionally custom type of message, called notification . Whenever the history model is changed, two computations are made. One is being triggered directly and sending a message to all connected clients, if a certain condition is met. Another one is being scheduled as a background task for a specific time. At this specific time, a message of the type notification will then be sent to all the clients that are connected at that time. For the consumers to work, they have to be connected to streams (see Routing ), which form URLs that a client can establish a connection to. In our case, a URL for the patient model would look something like this: wss://example.com/ws/patients/ Background Tasks Background Tasks are used in this application to send notifications via WebSockets at a specific time that is computed based on the input data. However, they can generally be used, to build up any kind of work queue. Tasks can be scheduled for specific times, may repeat, can be scheduled to be executed n seconds/minutes/hours(..) after a certain event and much more. In this application, a background task is e.g. scheduled to remind any connected client about an observation of a patient that is due, when it's time has come based on the time of the last observation and the monitoring interval. The background tasks of this application can be found in the patients/api/vies.py file and are decorated with the @background decorator. For more information on background tasks and possibilities, visit the official documentation: https://django-background-tasks.readthedocs.io/en/latest/ The Front end (Vue.js) Components Components are reusable instances in Vue.js. Once created, they can be imported and used in the template of other components. A simple example of a component would look like this: < template > < h1 > This is an example component! </ h1 > </ template > < script > export default { name : 'foo-bar' , data (){ return {} } } </ script > < style scoped > </ style > Components must not, but may consist of all these three sections: Template section: HTML Markup with Vue.js components Script section: \"Vue.js logic\" -> All the data, methods and lifecycle logic live here Style section: Not mandatory, but possible for e.g. scoped styling for the specific component With this component created, it can now be used like so in any other template: < div id = \"components-demo\" > < foo-bar ></ foo-bar > < h2 > Something here.. </ h2 > </ div > More on components is to be found in the official Vue.js documentation: https://vuejs.org/v2/guide/components.html Routing To be able to see different views in the browser, it is important, to map created components to routes. For example a component Foo.vue would be mapped to the route /foo and Bar.vue might be mapped to /bar . This would look something like this: const routes = [ { path : '/foo' , component : Foo }, { path : '/bar' , component : Bar } ] This will make sure, that the Foo component will be rendered, when we are navigating to www.example.com/foo . The router of this application is to be found in vue_frontend/src/dashboard/entry/router.js . In addition to the simple mapping of routes and components, it is possible and also sometimes necessary to provide some business logic inside the router. For instance it is possible to make sure, that an unauthorized user is being redirected to the /login route. More on the vue-router is to be found at the official documentation: https://router.vuejs.org/guide/ State-management This application uses the state management pattern/library vuex, which is the official supported state management for Vue.js. Vuex provides a centralized store for all the data of the application and therefore for all the different components, so that the data can be managed centralized. There are rules, ensuring, that the state can only be modified predictably. The following diagram by Vuex/Vue.js gives an overview of the workflow with vuex: The communication between the front end and therefore the store and the Back-end API only happens through so called actions , which are defined in the state-management. Changes will be then commited to mutations which will then mutate the state . The state is what is rendered inside the components. Whenever a state of some data is changing, the component will be re-rendering, as long as the principles of Vue.js and vuex are kept. Inside vue components again, it is possible to trigger/dispatch such an action, that then again connects to a back-end API. More on vuex is to be found on the official documentation: https://vuex.vuejs.org/#what-is-a-state-management-pattern","title":"Basics"},{"location":"03_basics/#basics","text":"This page covers the overall basics of the project regarding the back end (Django) and the front end (Vue.js). The most important aspects to get started will be covered. More in-depth guides/knowledge for either of the parts is planned for a different page (tbd).","title":"Basics"},{"location":"03_basics/#system-overview","text":"A brief overview over the system can be obtained from the following diagram: The following sections are going to offer a first insight into the respective areas: Quicklinks : The Back end (Django) The Front end (Vue.js) The Database (Postgresql)","title":"System overview"},{"location":"03_basics/#the-back-end-django","text":"","title":"The Back end (Django)"},{"location":"03_basics/#model-view-template-mvt","text":"Django is following the Model-View-Template structure, where the Model is for structuring and manipulating the data of the application, the view implements the business logic and the templates serves the views to the clients. In this project, the templates are rendering the static files provided by the webpack bundling, that are moved into the static folder inside the back end directory after executing npm run build inside the vue_frontend directory. The principle of Django's MVT architecture is visualized in the following diagram: Source: https://cdn.askpython.com/wp-content/uploads/2020/08/image-23.png.webp","title":"Model-View-Template (MVT)"},{"location":"03_basics/#model","text":"The model of the application is to be found in the respective models.py file. See https://docs.djangoproject.com/en/3.2/topics/db/models for documentation on how to create Models and available Fields. All of the data of the model instances are saved to a PostgreSQL Database. Postgres integrates well with Django and Django even supports some fields exclusively for Postgres. See https://docs.djangoproject.com/en/3.2/ref/contrib/postgres/","title":"Model"},{"location":"03_basics/#view","text":"The view implements the business logic of the application. In the patients/api/views.py , the REST API endpoints are defined. The most important endpoints that are exposed as of the end of the thesis are: Endpoint Actions (REST) Description /api/patients/ GET, POST List view of all patients /api/patients/id/ GET, PUT, PATCH, DELETE Detail view of a single patient /api/reports/ GET, POST List view of all reports /api/reports/id/ GET, PUT, PATCH, DELETE Detail view of a single report /rest-auth/login/ POST Login with username and password /rest-auth/logout/ POST Logout and delete token /rest-auth/user/ GET Retrieve user information A full documentation of all available endpoints as well as an interactive demo of the endpoints can be obtained from the endpoint /swagger . Curl commands can be interactively executed on the page and requests and responses can be analysed. The fields, that are to be included (or excluded) in the respective JSON responses are defined in the patients/api/serializers.py file. Attention The front end of this application works with data provided through WebSockets . The aforementioned REST API endpoints are delivered via HTTP and useful for the integration of other services. The communication between the back end and the front end is mostly based on WebSockets however. WebSockets allow for full-duplex communication, meaning that both, the back end and the front end can send each other messages whenever they need to. Without the other one asking for it. This enables a real-time behaviour in the front end and works well together with the reactivity of Vue.js. However there is some data, that doesn't need to be transferred via WebSockets, like the authentication data. This data is handled using HTTP REST on both sides. The following diagram illustrates the usage of HTTP and WebSockets: With the WebSocket integration, the endpoints for WebSocket requests are defined like so: Stream Consumer Model Actions (REST-like) patients PatientConsumer Patient List, Retrieve, Create, Patch, Update, Delete reports ReportConsumer Report List, Retrieve, Create, Patch, Update, Delete history HistoryConsumer HistoricalReport List, Retrieve, Patch, Update, Delete The endpoints are defined in the asgi.py file of the Project. For more information see Routing .","title":"View"},{"location":"03_basics/#template","text":"","title":"Template"},{"location":"03_basics/#routing","text":"The following code snippet from the asgi.py file shows the ProtocolTypeRouter that routes the HTTP and WebSocket requests according to their protocol types: application = ProtocolTypeRouter ({ \"http\" : get_asgi_application (), \"websocket\" : TokenAuthMiddlewareStack ( URLRouter ( [ re_path ( r \"^ws/$\" , AsyncJsonWebsocketDemultiplexer ( patients = PatientConsumer () . as_asgi (), reports = ReportConsumer () . as_asgi (), history = HistoryConsumer () . as_asgi (), ) . as_asgi ()), ] ) ), }) The streams are defined inside the Demultiplexer and connected to their respective consumer (see Consumer ).","title":"Routing"},{"location":"03_basics/#rest-api","text":"The REST API endpoints are defined as described before (see View ). An endpoint definition consists of several files: patients/models.py patients/api/serializers.py patients/api/views.py patients/api/urls.py The files are to be created/updated in the order shown above. The model is the first thing, as it is the base to what will be possible to expose via an API endpoint. The serializer defines which fields are to be included or excluded into the serialized JSON response and is based on the model. The view is handling the serialized JSON and able to add orderings to the data or filters. Besides the textual JSON output of every response, the Django REST Framework is also serving a browsable API with web pages, where one can create, update and delete model instances inside the browser. To be able to request the endpoints via the given URLs, the created Views have to be registered and named in the patients/api/urls.py file.","title":"REST API"},{"location":"03_basics/#websocket-endpoints","text":"The REST API endpoints are defined as described before (see View ). A WebSocket endpoint needs a REST API endpoint as a base. On top of that, two additional files have to be modified: patients/consumers.py config/asgi.py The consumers define the business logic for the clients connected to the WebSocket. In asgi.py , a consumer is being attached to a stream and therefore a URL is being created to which the clients may connect from e.g. the front end.","title":"WebSocket Endpoints"},{"location":"03_basics/#consumer","text":"Consumers are an important part of the definition of WebSocket endpoints in this application. Consumers contain the business logic that is relevant for the clients, that are connected to the WebSocket. The behaviour for the connection setup or the disconnecion may be defined as well as - and especially - the behaviour for when the client is connected to the WebSocket. What kind of messages should be sent to the client? What format should the messages have? Should the messages be sent to all connected clients or just to specific ones? When should the message be sent? These are the most relevant questions, but there are many more. To summarize, how consumers work as of now (June 2021) in this application: Every relevant model, i.e. Patient , Report and ReportHistory has their own consumer. The querysets and serializers are set to the ones of the REST API endpoints. In addition, an observer model is implemented to make sure, that every change that is made to a model is reflected to all connected clients . This holds for all of the mentioned models. Because of the set serializers, the messages will display as defined in the REST API configuration. For the history model, there is an additionally custom type of message, called notification . Whenever the history model is changed, two computations are made. One is being triggered directly and sending a message to all connected clients, if a certain condition is met. Another one is being scheduled as a background task for a specific time. At this specific time, a message of the type notification will then be sent to all the clients that are connected at that time. For the consumers to work, they have to be connected to streams (see Routing ), which form URLs that a client can establish a connection to. In our case, a URL for the patient model would look something like this: wss://example.com/ws/patients/","title":"Consumer"},{"location":"03_basics/#background-tasks","text":"Background Tasks are used in this application to send notifications via WebSockets at a specific time that is computed based on the input data. However, they can generally be used, to build up any kind of work queue. Tasks can be scheduled for specific times, may repeat, can be scheduled to be executed n seconds/minutes/hours(..) after a certain event and much more. In this application, a background task is e.g. scheduled to remind any connected client about an observation of a patient that is due, when it's time has come based on the time of the last observation and the monitoring interval. The background tasks of this application can be found in the patients/api/vies.py file and are decorated with the @background decorator. For more information on background tasks and possibilities, visit the official documentation: https://django-background-tasks.readthedocs.io/en/latest/","title":"Background Tasks"},{"location":"03_basics/#the-front-end-vuejs","text":"","title":"The Front end (Vue.js)"},{"location":"03_basics/#components","text":"Components are reusable instances in Vue.js. Once created, they can be imported and used in the template of other components. A simple example of a component would look like this: < template > < h1 > This is an example component! </ h1 > </ template > < script > export default { name : 'foo-bar' , data (){ return {} } } </ script > < style scoped > </ style > Components must not, but may consist of all these three sections: Template section: HTML Markup with Vue.js components Script section: \"Vue.js logic\" -> All the data, methods and lifecycle logic live here Style section: Not mandatory, but possible for e.g. scoped styling for the specific component With this component created, it can now be used like so in any other template: < div id = \"components-demo\" > < foo-bar ></ foo-bar > < h2 > Something here.. </ h2 > </ div > More on components is to be found in the official Vue.js documentation: https://vuejs.org/v2/guide/components.html","title":"Components"},{"location":"03_basics/#routing_1","text":"To be able to see different views in the browser, it is important, to map created components to routes. For example a component Foo.vue would be mapped to the route /foo and Bar.vue might be mapped to /bar . This would look something like this: const routes = [ { path : '/foo' , component : Foo }, { path : '/bar' , component : Bar } ] This will make sure, that the Foo component will be rendered, when we are navigating to www.example.com/foo . The router of this application is to be found in vue_frontend/src/dashboard/entry/router.js . In addition to the simple mapping of routes and components, it is possible and also sometimes necessary to provide some business logic inside the router. For instance it is possible to make sure, that an unauthorized user is being redirected to the /login route. More on the vue-router is to be found at the official documentation: https://router.vuejs.org/guide/","title":"Routing"},{"location":"03_basics/#state-management","text":"This application uses the state management pattern/library vuex, which is the official supported state management for Vue.js. Vuex provides a centralized store for all the data of the application and therefore for all the different components, so that the data can be managed centralized. There are rules, ensuring, that the state can only be modified predictably. The following diagram by Vuex/Vue.js gives an overview of the workflow with vuex: The communication between the front end and therefore the store and the Back-end API only happens through so called actions , which are defined in the state-management. Changes will be then commited to mutations which will then mutate the state . The state is what is rendered inside the components. Whenever a state of some data is changing, the component will be re-rendering, as long as the principles of Vue.js and vuex are kept. Inside vue components again, it is possible to trigger/dispatch such an action, that then again connects to a back-end API. More on vuex is to be found on the official documentation: https://vuex.vuejs.org/#what-is-a-state-management-pattern","title":"State-management"},{"location":"04_backend/","text":"Back end Attention More content coming soon. This page shall provide more in-depth information on the structure of the back end and it's most important files. Structure The back end is structured in a way, that distinguishes between a local development environment and a production environment. Therefore some files such as the Dockerfile (see Installation ) are available twice. Depending on the environment, the respective files should either be used or are used automatically. Files marked with the word base such as config/settings/base.py - as the name suggests - serve as a base for both, the local and the production environment. . \u251c\u2500\u2500 .envs \u251c\u2500\u2500 compose \u2502 \u251c\u2500\u2500 local \u2502 \u2514\u2500\u2500 production \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 settings \u251c\u2500\u2500 dashboard \u2502 \u251c\u2500\u2500 contrib \u2502 \u251c\u2500\u2500 patients \u2502 \u251c\u2500\u2500 static \u2502 \u251c\u2500\u2500 templates \u2502 \u251c\u2500\u2500 users \u2502 \u251c\u2500\u2500 utils \u2502 \u2514\u2500\u2500 webpack_bundle \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 _build \u2502 \u2514\u2500\u2500 _source \u251c\u2500\u2500 locale \u251c\u2500\u2500 requirements Getting started The most important folders, to get started with the back end are the following: config : The settings for the project are to be found in the config folder. dashboard/patients : This is the main app of the back end. It inherits the model definitions as well as the API's and the views. dashboard/patients/migrations : Migrations made for the patients model can be found in this folder. Migrations to other apps/models live in their respective folders. dashboard/static/vue : Just for information purposes: The static (HTML, CSS, JS..) files that are generated by the front end, will be transfered into this folder. dashboard/templates : Just for information purposes: Here lives the home.html which is the root of the app that is being served in the browser. requirements : All the requirements (dependencies) that are needed for development and/or production purposes. In the following, each of the different sections of the back end will be explained in more detail. env files Environment files are mainly used to store sensitive data such as passwords or secret keys that may cause vulnerabilities if exposed in the code. In local environments some things may be hardcoded, when they are depending on environment variables in production. This is an intended behaviour and should not be changed. See the config section and information about the settings. Most of the settings that require environment variables are defined there. .envs \u251c\u2500\u2500 .local \u2502 \u251c\u2500\u2500 .django \u2502 \u2514\u2500\u2500 .postgres \u2514\u2500\u2500 .production \u251c\u2500\u2500 .django \u2514\u2500\u2500 .postgres compose Except for the .yml files, all of the docker configuration is to be found in this directory. As usual, the configurations are separated by environments. . \u251c\u2500\u2500 local \u2502 \u251c\u2500\u2500 django \u2502 \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u2502 \u2514\u2500\u2500 start \u2502 \u2514\u2500\u2500 docs \u2502 \u2514\u2500\u2500 Dockerfile \u2514\u2500\u2500 production \u251c\u2500\u2500 django \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u251c\u2500\u2500 entrypoint \u2502 \u2514\u2500\u2500 start \u251c\u2500\u2500 postgres \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u2514\u2500\u2500 maintenance \u2502 \u251c\u2500\u2500 _sourced \u2502 \u251c\u2500\u2500 backup \u2502 \u251c\u2500\u2500 backups \u2502 \u2514\u2500\u2500 restore \u2514\u2500\u2500 traefik \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 traefik.yml config The main settings of the software are to be found in the config folder. Whats normally the settings.py file, lives in the settings folder and is separated by environment. Because there are settings, that local and production environments have in common, there is also a base.py , that serves as the base. In a local environment, the settings of both the base.py and the local.py will be considered. \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 api_router.py \u251c\u2500\u2500 asgi.py \u251c\u2500\u2500 middleware.py \u251c\u2500\u2500 settings \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 base.py \u2502 \u251c\u2500\u2500 local.py \u2502 \u251c\u2500\u2500 production.py \u2502 \u2514\u2500\u2500 test.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py dashboard . \u251c\u2500\u2500 contrib \u2502 \u2514\u2500\u2500 sites \u2502 \u2514\u2500\u2500 migrations \u251c\u2500\u2500 patients \u2502 \u251c\u2500\u2500 api \u2502 \u2514\u2500\u2500 migrations \u251c\u2500\u2500 static \u2502 \u251c\u2500\u2500 css \u2502 \u251c\u2500\u2500 fonts \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u2514\u2500\u2500 favicons \u2502 \u251c\u2500\u2500 js \u2502 \u251c\u2500\u2500 sass \u2502 \u2514\u2500\u2500 vue \u2502 \u251c\u2500\u2500 css \u2502 \u251c\u2500\u2500 fonts \u2502 \u251c\u2500\u2500 img \u2502 \u2514\u2500\u2500 js \u251c\u2500\u2500 templates \u2502 \u251c\u2500\u2500 account \u2502 \u251c\u2500\u2500 pages \u2502 \u251c\u2500\u2500 users \u2502 \u2514\u2500\u2500 webpack_bundle \u251c\u2500\u2500 users \u2502 \u251c\u2500\u2500 api \u2502 \u251c\u2500\u2500 migrations \u2502 \u2514\u2500\u2500 tests \u251c\u2500\u2500 utils \u2514\u2500\u2500 webpack_bundle \u2514\u2500\u2500 templatetags requirements The requirements follow the logic that was presented in the settings. base.txt is serving as a base for both local and production environments. Depending on the environment, the respective requirements will be installed additionally. The base.txt should only include what's needed in both environments. . \u251c\u2500\u2500 base.txt \u251c\u2500\u2500 local.txt \u2514\u2500\u2500 production.txt Local This section goes more into detail on how to develop the backend locally. While the installation is covered on the installation page, this section also provides details on which settings one might configure for their specific environment. Local development As explained on the installation page, there are two different docker-compose files for each of the environment. For local development, the docker container is built and started by executing the following two commands in the root directory of the project. docker-compose local.yml -f build This first command builds the docker container and installs all of the necessary requirements for the back end. Because we are building the container for the local environment here, the requirements base.txt and local.txt will be installed. The following command starts the docker container. docker-compose local.yml -f up Together with django some other processes, including redis (cache) and postgres (database) will be started. After starting the docker container, the console output would look something like the following: redis | 1:M 19 May 2021 13:09:00.119 * Ready to accept connections postgres | 2021-05-19 13:09:01.875 UTC [26] LOG: database system was shut down at 2021-05-11 19:27:08 UTC postgres | 2021-05-19 13:09:01.895 UTC [1] LOG: database system is ready to accept connections django | PostgreSQL is available django | Operations to perform: django | Apply all migrations: admin, auth, authtoken, background_task, contenttypes, patients, sessions, sites, users django | Running migrations: django | No migrations to apply. django | INFO: Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit) The last line of the output shows the URL of the application. However, to fully be able to develop locally, pay attention to the Front End page. After the docker container is up and running, additional commands (like makemigrations e.g.), inside the container can be execuded using the exec command: docker-compose -f local.yml exec django python manage.py makemigrations Production The most important difference between the local and the production environment are the environment variables . Not only, but mostly sensitive information is stored in environment variables and will not be exported from a local environment to a production environment. Therefore these environment variables have to be set in the production environment. It is suggested not to hardcode values for such variables into the code for production, but to really set and use environment variables. Configuring the environment environment variables The environment files can be found in the .envs directory like shown before. The most important thing for us here now is env_file section enlisting ./.envs/.local/.postgres . Generally, the stack's behavior is governed by a number of environment variables ( env(s) , for short) residing in envs/ . # PostgreSQL # ------------------------------------------------------------------------------ POSTGRES_HOST=postgres POSTGRES_DB=<your project slug> POSTGRES_USER=<your postgres user> POSTGRES_PASSWORD=<your password> ...","title":"Back End"},{"location":"04_backend/#back-end","text":"Attention More content coming soon. This page shall provide more in-depth information on the structure of the back end and it's most important files.","title":"Back end"},{"location":"04_backend/#structure","text":"The back end is structured in a way, that distinguishes between a local development environment and a production environment. Therefore some files such as the Dockerfile (see Installation ) are available twice. Depending on the environment, the respective files should either be used or are used automatically. Files marked with the word base such as config/settings/base.py - as the name suggests - serve as a base for both, the local and the production environment. . \u251c\u2500\u2500 .envs \u251c\u2500\u2500 compose \u2502 \u251c\u2500\u2500 local \u2502 \u2514\u2500\u2500 production \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 settings \u251c\u2500\u2500 dashboard \u2502 \u251c\u2500\u2500 contrib \u2502 \u251c\u2500\u2500 patients \u2502 \u251c\u2500\u2500 static \u2502 \u251c\u2500\u2500 templates \u2502 \u251c\u2500\u2500 users \u2502 \u251c\u2500\u2500 utils \u2502 \u2514\u2500\u2500 webpack_bundle \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 _build \u2502 \u2514\u2500\u2500 _source \u251c\u2500\u2500 locale \u251c\u2500\u2500 requirements Getting started The most important folders, to get started with the back end are the following: config : The settings for the project are to be found in the config folder. dashboard/patients : This is the main app of the back end. It inherits the model definitions as well as the API's and the views. dashboard/patients/migrations : Migrations made for the patients model can be found in this folder. Migrations to other apps/models live in their respective folders. dashboard/static/vue : Just for information purposes: The static (HTML, CSS, JS..) files that are generated by the front end, will be transfered into this folder. dashboard/templates : Just for information purposes: Here lives the home.html which is the root of the app that is being served in the browser. requirements : All the requirements (dependencies) that are needed for development and/or production purposes. In the following, each of the different sections of the back end will be explained in more detail. env files Environment files are mainly used to store sensitive data such as passwords or secret keys that may cause vulnerabilities if exposed in the code. In local environments some things may be hardcoded, when they are depending on environment variables in production. This is an intended behaviour and should not be changed. See the config section and information about the settings. Most of the settings that require environment variables are defined there. .envs \u251c\u2500\u2500 .local \u2502 \u251c\u2500\u2500 .django \u2502 \u2514\u2500\u2500 .postgres \u2514\u2500\u2500 .production \u251c\u2500\u2500 .django \u2514\u2500\u2500 .postgres compose Except for the .yml files, all of the docker configuration is to be found in this directory. As usual, the configurations are separated by environments. . \u251c\u2500\u2500 local \u2502 \u251c\u2500\u2500 django \u2502 \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u2502 \u2514\u2500\u2500 start \u2502 \u2514\u2500\u2500 docs \u2502 \u2514\u2500\u2500 Dockerfile \u2514\u2500\u2500 production \u251c\u2500\u2500 django \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u251c\u2500\u2500 entrypoint \u2502 \u2514\u2500\u2500 start \u251c\u2500\u2500 postgres \u2502 \u251c\u2500\u2500 Dockerfile \u2502 \u2514\u2500\u2500 maintenance \u2502 \u251c\u2500\u2500 _sourced \u2502 \u251c\u2500\u2500 backup \u2502 \u251c\u2500\u2500 backups \u2502 \u2514\u2500\u2500 restore \u2514\u2500\u2500 traefik \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 traefik.yml config The main settings of the software are to be found in the config folder. Whats normally the settings.py file, lives in the settings folder and is separated by environment. Because there are settings, that local and production environments have in common, there is also a base.py , that serves as the base. In a local environment, the settings of both the base.py and the local.py will be considered. \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 api_router.py \u251c\u2500\u2500 asgi.py \u251c\u2500\u2500 middleware.py \u251c\u2500\u2500 settings \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 base.py \u2502 \u251c\u2500\u2500 local.py \u2502 \u251c\u2500\u2500 production.py \u2502 \u2514\u2500\u2500 test.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py dashboard . \u251c\u2500\u2500 contrib \u2502 \u2514\u2500\u2500 sites \u2502 \u2514\u2500\u2500 migrations \u251c\u2500\u2500 patients \u2502 \u251c\u2500\u2500 api \u2502 \u2514\u2500\u2500 migrations \u251c\u2500\u2500 static \u2502 \u251c\u2500\u2500 css \u2502 \u251c\u2500\u2500 fonts \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u2514\u2500\u2500 favicons \u2502 \u251c\u2500\u2500 js \u2502 \u251c\u2500\u2500 sass \u2502 \u2514\u2500\u2500 vue \u2502 \u251c\u2500\u2500 css \u2502 \u251c\u2500\u2500 fonts \u2502 \u251c\u2500\u2500 img \u2502 \u2514\u2500\u2500 js \u251c\u2500\u2500 templates \u2502 \u251c\u2500\u2500 account \u2502 \u251c\u2500\u2500 pages \u2502 \u251c\u2500\u2500 users \u2502 \u2514\u2500\u2500 webpack_bundle \u251c\u2500\u2500 users \u2502 \u251c\u2500\u2500 api \u2502 \u251c\u2500\u2500 migrations \u2502 \u2514\u2500\u2500 tests \u251c\u2500\u2500 utils \u2514\u2500\u2500 webpack_bundle \u2514\u2500\u2500 templatetags requirements The requirements follow the logic that was presented in the settings. base.txt is serving as a base for both local and production environments. Depending on the environment, the respective requirements will be installed additionally. The base.txt should only include what's needed in both environments. . \u251c\u2500\u2500 base.txt \u251c\u2500\u2500 local.txt \u2514\u2500\u2500 production.txt","title":"Structure"},{"location":"04_backend/#local","text":"This section goes more into detail on how to develop the backend locally. While the installation is covered on the installation page, this section also provides details on which settings one might configure for their specific environment.","title":"Local"},{"location":"04_backend/#local-development","text":"As explained on the installation page, there are two different docker-compose files for each of the environment. For local development, the docker container is built and started by executing the following two commands in the root directory of the project. docker-compose local.yml -f build This first command builds the docker container and installs all of the necessary requirements for the back end. Because we are building the container for the local environment here, the requirements base.txt and local.txt will be installed. The following command starts the docker container. docker-compose local.yml -f up Together with django some other processes, including redis (cache) and postgres (database) will be started. After starting the docker container, the console output would look something like the following: redis | 1:M 19 May 2021 13:09:00.119 * Ready to accept connections postgres | 2021-05-19 13:09:01.875 UTC [26] LOG: database system was shut down at 2021-05-11 19:27:08 UTC postgres | 2021-05-19 13:09:01.895 UTC [1] LOG: database system is ready to accept connections django | PostgreSQL is available django | Operations to perform: django | Apply all migrations: admin, auth, authtoken, background_task, contenttypes, patients, sessions, sites, users django | Running migrations: django | No migrations to apply. django | INFO: Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit) The last line of the output shows the URL of the application. However, to fully be able to develop locally, pay attention to the Front End page. After the docker container is up and running, additional commands (like makemigrations e.g.), inside the container can be execuded using the exec command: docker-compose -f local.yml exec django python manage.py makemigrations","title":"Local development"},{"location":"04_backend/#production","text":"The most important difference between the local and the production environment are the environment variables . Not only, but mostly sensitive information is stored in environment variables and will not be exported from a local environment to a production environment. Therefore these environment variables have to be set in the production environment. It is suggested not to hardcode values for such variables into the code for production, but to really set and use environment variables.","title":"Production"},{"location":"04_backend/#configuring-the-environment","text":"environment variables The environment files can be found in the .envs directory like shown before. The most important thing for us here now is env_file section enlisting ./.envs/.local/.postgres . Generally, the stack's behavior is governed by a number of environment variables ( env(s) , for short) residing in envs/ . # PostgreSQL # ------------------------------------------------------------------------------ POSTGRES_HOST=postgres POSTGRES_DB=<your project slug> POSTGRES_USER=<your postgres user> POSTGRES_PASSWORD=<your password> ...","title":"Configuring the environment"},{"location":"05_frontend/","text":"Front end Attention More content coming soon. This page shall provide more in-depth information on the structure of the front end and it's most important files. Structure The main directory of the front end is the vue_frontend folder. It's structure presents as follows on the first level: . \u251c\u2500\u2500 .env \u251c\u2500\u2500 .browserslistrc \u251c\u2500\u2500 .eslintrc.js \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 README.md \u251c\u2500\u2500 babel.config.js \u251c\u2500\u2500 node_modules \u251c\u2500\u2500 package-lock.json \u251c\u2500\u2500 package.json \u251c\u2500\u2500 src \u251c\u2500\u2500 vue.config.js \u2514\u2500\u2500 webpack-stats.json Important files in the root directory .env : Environment variables for the front end README.md : Quickstart with commands for development node_modules : Auto-generated folder by running npm install that inherits all dependencies package.json : Metadata and dependencies src : Source code of the project vue.config.js : Webpack configuration Source Code As mentioned in the previous section, the source code of the front end is to be found in the src directory. It is a Vue App consisting of multiple .vue files that are divided into components or more complex layouts. For the state-management of the app, a store is set up. Everything related to the state-management is to be found inside the store directory. . \u251c\u2500\u2500 App.vue \u251c\u2500\u2500 dashboard \u2502 \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 directives \u2502 \u251c\u2500\u2500 entry \u2502 \u2502 \u251c\u2500\u2500 main.js \u2502 \u2502 \u251c\u2500\u2500 registerServiceWorker.js \u2502 \u2502 \u2514\u2500\u2500 router.js \u2502 \u251c\u2500\u2500 layout \u2502 \u251c\u2500\u2500 plugins \u2502 \u2514\u2500\u2500 views \u2514\u2500\u2500 store \u251c\u2500\u2500 modules \u2514\u2500\u2500 vuex_usage_utils.js Getting started with the front end main.js : Entrypoint for the app. Connects the store, the router, the App and everything that is needed. router.js : Defines the routes for the app and connects components/layouts and names to them. App.vue : The main structure of the app that is rendered at first. vuex_usage_utils.js : The store/state-management configurations.","title":"Front End"},{"location":"05_frontend/#front-end","text":"Attention More content coming soon. This page shall provide more in-depth information on the structure of the front end and it's most important files.","title":"Front end"},{"location":"05_frontend/#structure","text":"The main directory of the front end is the vue_frontend folder. It's structure presents as follows on the first level: . \u251c\u2500\u2500 .env \u251c\u2500\u2500 .browserslistrc \u251c\u2500\u2500 .eslintrc.js \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 README.md \u251c\u2500\u2500 babel.config.js \u251c\u2500\u2500 node_modules \u251c\u2500\u2500 package-lock.json \u251c\u2500\u2500 package.json \u251c\u2500\u2500 src \u251c\u2500\u2500 vue.config.js \u2514\u2500\u2500 webpack-stats.json Important files in the root directory .env : Environment variables for the front end README.md : Quickstart with commands for development node_modules : Auto-generated folder by running npm install that inherits all dependencies package.json : Metadata and dependencies src : Source code of the project vue.config.js : Webpack configuration","title":"Structure"},{"location":"05_frontend/#source-code","text":"As mentioned in the previous section, the source code of the front end is to be found in the src directory. It is a Vue App consisting of multiple .vue files that are divided into components or more complex layouts. For the state-management of the app, a store is set up. Everything related to the state-management is to be found inside the store directory. . \u251c\u2500\u2500 App.vue \u251c\u2500\u2500 dashboard \u2502 \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 directives \u2502 \u251c\u2500\u2500 entry \u2502 \u2502 \u251c\u2500\u2500 main.js \u2502 \u2502 \u251c\u2500\u2500 registerServiceWorker.js \u2502 \u2502 \u2514\u2500\u2500 router.js \u2502 \u251c\u2500\u2500 layout \u2502 \u251c\u2500\u2500 plugins \u2502 \u2514\u2500\u2500 views \u2514\u2500\u2500 store \u251c\u2500\u2500 modules \u2514\u2500\u2500 vuex_usage_utils.js Getting started with the front end main.js : Entrypoint for the app. Connects the store, the router, the App and everything that is needed. router.js : Defines the routes for the app and connects components/layouts and names to them. App.vue : The main structure of the app that is rendered at first. vuex_usage_utils.js : The store/state-management configurations.","title":"Source Code"},{"location":"06_faq/","text":"Frequently Asked Questions How to approach the project? The general structure of the project is divided into two parts: back end and front end. The back end is made with Django, a web framework based on python . The front end is made with Vue.js. Vue.js consists of JavaScript, HTML and CSS. Both, Django and Vue.js are fairly easy to learn. Back end / Django First of all, the Django project itself is providing useful resources to get started with Django: Django Project For this project, for django a good start would also be the documentation of the Django REST Framework , as the back end provides an API for different applications. See Django REST Framework The Dengue Dashboard in particular is based on being a real-time web-application and therefore uses a full-duplex communication between the server and the client. That means that both, client and server, may always send each other messages after an initial connection is established. That couldn't be provided with normal HTTP REST communication as previous mentioned. For this purpose, the WebSocket protocol was implemented into the project, which made it necessary to implement Django Channels , that enables channeling the different protocols (HTTP/WebSockets). An incredibly useful article , to understand the structure of this project and the overview of handling different protocols in a real-time environment is to be found here: https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django . It is written by one of the core developers of Django and not only helps to understand the structure of this project, but also visualizes the concepts of Django Channels. To serve the API via WebSockets , the Django Channels REST Framework was used. In general, it is possible and common to serve .html files from the Django Templates folder. You can write html and specific Django syntax to render pages that will be served to the client. For this project however, Vue.js is used to create the files for the front end and display information to the client. The reason for this is, that Vue.js is a reactive JavaScript framework. It enables automatic updating of the page/DOM in case of updates to the data that is being displayed. Furthermore, with a JavaScript framework like this, it is possible to separate the data from it's representation. The front end is solely developed in the vue_frontend directory, whilst all of the other folders are connected to the back end. Besides Django, the back end also includes other frameworks/technologies that are e.g. used for deployment. To fully understand the files of the back end, one could look at the following technologies, that are used: Python Django (as a web framework based on python) Docker/Dockerfiles Shell Scripts Markdown (for Documentation purposes mostly) pip (package manager to install python packages) JSON Knowledge of the terminal Front end / Vue.js The front end of the application is developed with Vue.js. The main reason besides the separation of content and representation is the reactivity. Through state-management it is possible, that the DOM automatically refreshes whenever changes to the represented data is made. This enhances the real-time feature of the web-application. Vue has got several other advantages such as that it is light-weighted and incrementally adoptable, thus scalable. A good starting point for Vue.js is the project website itself. Vue.js is open-source and well-documented. https://vuejs.org/v2/guide/ To connect with the aforementioned WebSocket provided by the Django Channels REST Framework, a client side implementation is used. The maybe most important part in the front end implementation is the state-management. Vuex is a state-management pattern and library for Vue.js. The documentation for vuex delivers a good explanation of what vuex is and how it works. https://vuex.vuejs.org/ The following diagram gives a brief overview over the vuex state-management pattern from the aforementioned website. To fully understand the files of the front end, one could look at the following technologies: JavaScript HTML CSS Bootstrap (as a CSS framework that is used in the front end template) npm (package manager to install javascript packages) Vue.js Vuex (state-management) Single Page Applications WebPack (Bundling files into static assets) JSON Developer Tools of your Browser of Choice (Chrome or Firefox are recommended) Which IDE is recommended? I would recommend PyCharm Professional. It is a powerful IDE for Python development but with support for Vue.js and comes with rich features regarding project navigation, highlighting, code completion, TODO management, integrated terminal or python console etc. It is developed by JetBrains and free of charge for students. Great and useful features for a project this size, are: Structure view: Cmd+7 (Mac) / Alt+7 (Win) Find file by name: Shift+Cmd+O (Mac) / Ctrl+F12 (Win) Find in files: Shift+Cmd+F (Mac) / Ctrl+Shift+F (Win) All Shortcuts for Win/Linux: https://resources.jetbrains.com/storage/products/pycharm/docs/PyCharm_ReferenceCard.pdf All Shortcuts for MacOS: https://resources.jetbrains.com/storage/products/pycharm/docs/PyCharm_ReferenceCard_mac.pdf localhost:8000 is not showing the app. You started Docker but localhost:8000 is not showing the App? There is a couple of things that could be wrong here. Front end is not up and running First of all, make sure, that the front end is being served. You can achieve this by running npm install once and then npm run serve inside the vue_frontend directory of the project. npm run serve will serve the front end and enable hot reloading, which means that all changes made to the code will automatically refresh the page in the browser after saving the file. Cache is broken The app is made to make as little requests as necessary. That means, if some JavaScript or CSS file that is needed for the page was already loaded into the cache once, the page will most likely not request the same file again unless the file is marked as modified. This is one reason, why the webpack configuration, that bundles the front end .vue files to static .js and .css files generates a unique hash that is appended to every file. The files will be renewed in the browser after every build process. In local development however, the development cycle might lead to a broken cache, i.e. a cache, where files are mistaken to be the newest when they aren't. The easiest way to verify if that is the problem you are encountering is to delete the cached files or to see if the problem persists in a private window. Personal experience showed, that these caching problems in local development rarely occur, when building the project with npm run build after a developing session. Serving in the wrong location The standard port of local development for Vue.js is :8080 whereas the Docker will serve on port :8000 . Both will work, but localhost:8000 is preferable and used throughout the application. Depending on your system/machine it is possible, that localhost or 0.0.0.0 or 127.0.0.1 is not the IP that your Docker instance is serving the app on. Another possibility is, that the ports are not available to your host system or blocked by the firewall. Vue.js will usually automatically turn to another port then but in cases might not. So for debugging, you might follow these steps: https://stackoverflow.com/questions/46176584/docker-bind-for-0-0-0-04000-failed-port-is-already-allocated Check your firewall settings for the ports Check the IP/Port of your docker process(es) When you encounter another IP than any of the localhost IPs, it is important to whitelist them in the django app ( ALLOWED_HOSTS ) and also to exchange all strings containing the localhost URL to your new IP. The ALLOWED_HOSTS can e.g. be altered in config/settings/local.py . More information on ALLOWED_HOSTS: https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts Problems with deploying Coming soon ...","title":"FAQ"},{"location":"06_faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"06_faq/#how-to-approach-the-project","text":"The general structure of the project is divided into two parts: back end and front end. The back end is made with Django, a web framework based on python . The front end is made with Vue.js. Vue.js consists of JavaScript, HTML and CSS. Both, Django and Vue.js are fairly easy to learn.","title":"How to approach the project?"},{"location":"06_faq/#back-end-django","text":"First of all, the Django project itself is providing useful resources to get started with Django: Django Project For this project, for django a good start would also be the documentation of the Django REST Framework , as the back end provides an API for different applications. See Django REST Framework The Dengue Dashboard in particular is based on being a real-time web-application and therefore uses a full-duplex communication between the server and the client. That means that both, client and server, may always send each other messages after an initial connection is established. That couldn't be provided with normal HTTP REST communication as previous mentioned. For this purpose, the WebSocket protocol was implemented into the project, which made it necessary to implement Django Channels , that enables channeling the different protocols (HTTP/WebSockets). An incredibly useful article , to understand the structure of this project and the overview of handling different protocols in a real-time environment is to be found here: https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django . It is written by one of the core developers of Django and not only helps to understand the structure of this project, but also visualizes the concepts of Django Channels. To serve the API via WebSockets , the Django Channels REST Framework was used. In general, it is possible and common to serve .html files from the Django Templates folder. You can write html and specific Django syntax to render pages that will be served to the client. For this project however, Vue.js is used to create the files for the front end and display information to the client. The reason for this is, that Vue.js is a reactive JavaScript framework. It enables automatic updating of the page/DOM in case of updates to the data that is being displayed. Furthermore, with a JavaScript framework like this, it is possible to separate the data from it's representation. The front end is solely developed in the vue_frontend directory, whilst all of the other folders are connected to the back end. Besides Django, the back end also includes other frameworks/technologies that are e.g. used for deployment. To fully understand the files of the back end, one could look at the following technologies, that are used: Python Django (as a web framework based on python) Docker/Dockerfiles Shell Scripts Markdown (for Documentation purposes mostly) pip (package manager to install python packages) JSON Knowledge of the terminal","title":"Back end / Django"},{"location":"06_faq/#front-end-vuejs","text":"The front end of the application is developed with Vue.js. The main reason besides the separation of content and representation is the reactivity. Through state-management it is possible, that the DOM automatically refreshes whenever changes to the represented data is made. This enhances the real-time feature of the web-application. Vue has got several other advantages such as that it is light-weighted and incrementally adoptable, thus scalable. A good starting point for Vue.js is the project website itself. Vue.js is open-source and well-documented. https://vuejs.org/v2/guide/ To connect with the aforementioned WebSocket provided by the Django Channels REST Framework, a client side implementation is used. The maybe most important part in the front end implementation is the state-management. Vuex is a state-management pattern and library for Vue.js. The documentation for vuex delivers a good explanation of what vuex is and how it works. https://vuex.vuejs.org/ The following diagram gives a brief overview over the vuex state-management pattern from the aforementioned website. To fully understand the files of the front end, one could look at the following technologies: JavaScript HTML CSS Bootstrap (as a CSS framework that is used in the front end template) npm (package manager to install javascript packages) Vue.js Vuex (state-management) Single Page Applications WebPack (Bundling files into static assets) JSON Developer Tools of your Browser of Choice (Chrome or Firefox are recommended)","title":"Front end / Vue.js"},{"location":"06_faq/#which-ide-is-recommended","text":"I would recommend PyCharm Professional. It is a powerful IDE for Python development but with support for Vue.js and comes with rich features regarding project navigation, highlighting, code completion, TODO management, integrated terminal or python console etc. It is developed by JetBrains and free of charge for students. Great and useful features for a project this size, are: Structure view: Cmd+7 (Mac) / Alt+7 (Win) Find file by name: Shift+Cmd+O (Mac) / Ctrl+F12 (Win) Find in files: Shift+Cmd+F (Mac) / Ctrl+Shift+F (Win) All Shortcuts for Win/Linux: https://resources.jetbrains.com/storage/products/pycharm/docs/PyCharm_ReferenceCard.pdf All Shortcuts for MacOS: https://resources.jetbrains.com/storage/products/pycharm/docs/PyCharm_ReferenceCard_mac.pdf","title":"Which IDE is recommended?"},{"location":"06_faq/#localhost8000-is-not-showing-the-app","text":"You started Docker but localhost:8000 is not showing the App? There is a couple of things that could be wrong here. Front end is not up and running First of all, make sure, that the front end is being served. You can achieve this by running npm install once and then npm run serve inside the vue_frontend directory of the project. npm run serve will serve the front end and enable hot reloading, which means that all changes made to the code will automatically refresh the page in the browser after saving the file. Cache is broken The app is made to make as little requests as necessary. That means, if some JavaScript or CSS file that is needed for the page was already loaded into the cache once, the page will most likely not request the same file again unless the file is marked as modified. This is one reason, why the webpack configuration, that bundles the front end .vue files to static .js and .css files generates a unique hash that is appended to every file. The files will be renewed in the browser after every build process. In local development however, the development cycle might lead to a broken cache, i.e. a cache, where files are mistaken to be the newest when they aren't. The easiest way to verify if that is the problem you are encountering is to delete the cached files or to see if the problem persists in a private window. Personal experience showed, that these caching problems in local development rarely occur, when building the project with npm run build after a developing session. Serving in the wrong location The standard port of local development for Vue.js is :8080 whereas the Docker will serve on port :8000 . Both will work, but localhost:8000 is preferable and used throughout the application. Depending on your system/machine it is possible, that localhost or 0.0.0.0 or 127.0.0.1 is not the IP that your Docker instance is serving the app on. Another possibility is, that the ports are not available to your host system or blocked by the firewall. Vue.js will usually automatically turn to another port then but in cases might not. So for debugging, you might follow these steps: https://stackoverflow.com/questions/46176584/docker-bind-for-0-0-0-04000-failed-port-is-already-allocated Check your firewall settings for the ports Check the IP/Port of your docker process(es) When you encounter another IP than any of the localhost IPs, it is important to whitelist them in the django app ( ALLOWED_HOSTS ) and also to exchange all strings containing the localhost URL to your new IP. The ALLOWED_HOSTS can e.g. be altered in config/settings/local.py . More information on ALLOWED_HOSTS: https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts","title":"localhost:8000 is not showing the app."},{"location":"06_faq/#problems-with-deploying","text":"Coming soon ...","title":"Problems with deploying"},{"location":"07_Resources/","text":"Resources Frameworks, Libraries & other Resources Django Background Tasks https://github.com/arteria/django-background-tasks Documentation of the Vue Argon Dashboard Template https://github.com/creativetimofficial/vue-argon-dashboard Django Postgres Documentation https://docs.djangoproject.com/en/3.1/ref/contrib/postgres/ Django Security Documentation https://docs.djangoproject.com/en/3.1/topics/security/ Django Documentation https://www.djangoproject.com/ Django Channels https://channels.readthedocs.io/en/stable/ Django Channel Layers https://channels.readthedocs.io/en/stable/topics/channel_layers.html Django REST Framework https://www.django-rest-framework.org/ WebSocket Protocol https://tools.ietf.org/html/rfc6455 Django Channels REST Framework Client https://github.com/theY4Kman/dcrf-client Redis https://redis.io/ PostgreSQL https://www.postgresql.org/ Vuex PersistedState https://github.com/robinvdvleuten/vuex-persistedstate Vue Router https://router.vuejs.org/ Vue.js https://vuejs.org/ Vuex https://vuex.vuejs.org/#what-is-a-state-management-pattern Django Channels REST Framework https://github.com/hishnash/djangochannelsrestframework WebPack https://webpack.js.org/","title":"Resources"},{"location":"07_Resources/#resources","text":"","title":"Resources"},{"location":"07_Resources/#frameworks-libraries-other-resources","text":"Django Background Tasks https://github.com/arteria/django-background-tasks Documentation of the Vue Argon Dashboard Template https://github.com/creativetimofficial/vue-argon-dashboard Django Postgres Documentation https://docs.djangoproject.com/en/3.1/ref/contrib/postgres/ Django Security Documentation https://docs.djangoproject.com/en/3.1/topics/security/ Django Documentation https://www.djangoproject.com/ Django Channels https://channels.readthedocs.io/en/stable/ Django Channel Layers https://channels.readthedocs.io/en/stable/topics/channel_layers.html Django REST Framework https://www.django-rest-framework.org/ WebSocket Protocol https://tools.ietf.org/html/rfc6455 Django Channels REST Framework Client https://github.com/theY4Kman/dcrf-client Redis https://redis.io/ PostgreSQL https://www.postgresql.org/ Vuex PersistedState https://github.com/robinvdvleuten/vuex-persistedstate Vue Router https://router.vuejs.org/ Vue.js https://vuejs.org/ Vuex https://vuex.vuejs.org/#what-is-a-state-management-pattern Django Channels REST Framework https://github.com/hishnash/djangochannelsrestframework WebPack https://webpack.js.org/","title":"Frameworks, Libraries &amp; other Resources"},{"location":"Changelog/","text":"Changelog Dengue Dashboard Docs v1.0.3 - June 7, 2021 Restructuring the navigation Add Tutorials/REST API Tutorial v1.0.2 - June 6, 2021 Add content to Basics page: WebSockets, HTTP, Consumer, Components, Routing, State-management v1.0.2 - June 1, 2021 Add content to Back end page Start writing content for Front end page Add dark mode Basics: Add MVT diagram and System Overview Back end: Add \"Getting started\" explanations for folders Back end: Restructuring v1.0.1 - May 16, 2021 Modify Layout of Installation page and add Note Add content to Back end page (Structure) v1.0.0 - May 9, 2021 Create About page Create FAQ page Create Installation page Create Resources page Create Basics page Create Changelog page","title":"Changelog"},{"location":"Changelog/#changelog","text":"","title":"Changelog"},{"location":"Changelog/#dengue-dashboard-docs","text":"","title":"Dengue Dashboard Docs"},{"location":"Changelog/#v103-june-7-2021","text":"Restructuring the navigation Add Tutorials/REST API Tutorial","title":"v1.0.3 - June 7, 2021"},{"location":"Changelog/#v102-june-6-2021","text":"Add content to Basics page: WebSockets, HTTP, Consumer, Components, Routing, State-management","title":"v1.0.2 - June 6, 2021"},{"location":"Changelog/#v102-june-1-2021","text":"Add content to Back end page Start writing content for Front end page Add dark mode Basics: Add MVT diagram and System Overview Back end: Add \"Getting started\" explanations for folders Back end: Restructuring","title":"v1.0.2 - June 1, 2021"},{"location":"Changelog/#v101-may-16-2021","text":"Modify Layout of Installation page and add Note Add content to Back end page (Structure)","title":"v1.0.1 - May 16, 2021"},{"location":"Changelog/#v100-may-9-2021","text":"Create About page Create FAQ page Create Installation page Create Resources page Create Basics page Create Changelog page","title":"v1.0.0 - May 9, 2021"}]}