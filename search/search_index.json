{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About The project \"Dengue Dashboard\" is originally a part of the Bachelor Report of Jennifer Horstmann submitted to the faculty of Mathematics and Computer Science at the University of Bremen for the degree of Bachelor of Science. The system allows for management and visualizations of all relevant vital data for dengue fever patients as well as other parameters like the fuid balance. It is a web app that allows multiple clients to retrieve updates and notifications in real-time and therefore supports tele-consultation and timely interventions which are crucial in the treatment of dengue fever.","title":"About"},{"location":"#about","text":"The project \"Dengue Dashboard\" is originally a part of the Bachelor Report of Jennifer Horstmann submitted to the faculty of Mathematics and Computer Science at the University of Bremen for the degree of Bachelor of Science. The system allows for management and visualizations of all relevant vital data for dengue fever patients as well as other parameters like the fuid balance. It is a web app that allows multiple clients to retrieve updates and notifications in real-time and therefore supports tele-consultation and timely interventions which are crucial in the treatment of dengue fever.","title":"About"},{"location":"02_Installation/","text":"Installation This page serves as an installation guide for local development of the Dengue Dashboard . The guide assumes, that the reader already cloned a recent repository of the project and navigated to the project root. The shown commands are executed from the command line in the root directory if not declared otherwise. 1. Back end: Django Getting Up and Running Locally With Docker The steps below will get you up and running with a local development environment. All of these commands assume you are in the root of your generated project. See also: https://github.com/pydanny/cookiecutter-django/ Prerequisites Docker; if you don't have it yet, follow the installation instructions ; Docker Compose; refer to the official documentation for the installation guide . Build the Stack This can take a while, especially the first time you run this particular command on your development system: docker-compose -f local.yml build Generally, if you want to emulate production environment use production.yml instead. And this is true for any other actions you might need to perform: whenever a switch is required, just do it! Run the Stack This brings up both Django and PostgreSQL. The first time it is run it might take a while to get started, but subsequent runs will occur quickly. Open a terminal at the project root and run the following for local development: docker-compose -f local.yml up You can also set the environment variable COMPOSE_FILE pointing to local.yml like this: export COMPOSE_FILE=local.yml And then run: docker-compose up To run in a detached (background) mode, just:: docker-compose up -d (Optionally) Designate your Docker Development Server IP When DEBUG is set to True , the host is validated against ['localhost', '127.0.0.1', '[::1]'] . This is adequate when running a virtualenv . For Docker, in the config.settings.local , add your host development server IP to INTERNAL_IPS or ALLOWED_HOSTS if the variable exists. Alternative: Virtual Environment for Python Prerequisites : Installation of Python 3, Pip, Django and a Unix/MacOS or Windows Machine As an alternative to Docker, the project can be developed in a virtual environment for python. To create a virtual environment, decide on a name, e.g. env_name and create on like so in a folder above or aside the project folder: python3 -m venv env_name To activate the virtual environment on Unix or MacOS on a level above the environment folder that was just created: source env_name/bin/activate On Windows: env_name\\Scripts\\activate.bat With the virtual environment at hand (and activated), the requirements for the projects can now be installed manually only to this environment: pip install requirements/local.txt For more information on virtual environments, please refer to the Python 3 tutorial: https://docs.python.org/3/tutorial/venv.html 2. Front end: Vue.js This app integrates with a Vue single page app (SPA) located in vue_frontend . To initialize the frontend, from the vue_frontend directory, run: npm install To serve the Vue frontend in hot-reloading development mode together with the back end : npm run serve And to build for deployment: npm run build Commands Execute Management Commands As with any shell command that we wish to run in our container, this is done using the docker-compose -f local.yml run --rm command: docker-compose -f local.yml run --rm django python manage.py migrate docker-compose -f local.yml run --rm django python manage.py createsuperuser Here, django is the target service we are executing the commands against. More on Docker and local development can be found in \"LOCAL_DEV.rst\".","title":"Installation"},{"location":"02_Installation/#installation","text":"This page serves as an installation guide for local development of the Dengue Dashboard . The guide assumes, that the reader already cloned a recent repository of the project and navigated to the project root. The shown commands are executed from the command line in the root directory if not declared otherwise.","title":"Installation"},{"location":"02_Installation/#1-back-end-django","text":"","title":"1. Back end: Django"},{"location":"02_Installation/#getting-up-and-running-locally-with-docker","text":"The steps below will get you up and running with a local development environment. All of these commands assume you are in the root of your generated project. See also: https://github.com/pydanny/cookiecutter-django/","title":"Getting Up and Running Locally With Docker"},{"location":"02_Installation/#prerequisites","text":"Docker; if you don't have it yet, follow the installation instructions ; Docker Compose; refer to the official documentation for the installation guide .","title":"Prerequisites"},{"location":"02_Installation/#build-the-stack","text":"This can take a while, especially the first time you run this particular command on your development system: docker-compose -f local.yml build Generally, if you want to emulate production environment use production.yml instead. And this is true for any other actions you might need to perform: whenever a switch is required, just do it!","title":"Build the Stack"},{"location":"02_Installation/#run-the-stack","text":"This brings up both Django and PostgreSQL. The first time it is run it might take a while to get started, but subsequent runs will occur quickly. Open a terminal at the project root and run the following for local development: docker-compose -f local.yml up You can also set the environment variable COMPOSE_FILE pointing to local.yml like this: export COMPOSE_FILE=local.yml And then run: docker-compose up To run in a detached (background) mode, just:: docker-compose up -d","title":"Run the Stack"},{"location":"02_Installation/#optionally-designate-your-docker-development-server-ip","text":"When DEBUG is set to True , the host is validated against ['localhost', '127.0.0.1', '[::1]'] . This is adequate when running a virtualenv . For Docker, in the config.settings.local , add your host development server IP to INTERNAL_IPS or ALLOWED_HOSTS if the variable exists.","title":"(Optionally) Designate your Docker Development Server IP"},{"location":"02_Installation/#alternative-virtual-environment-for-python","text":"Prerequisites : Installation of Python 3, Pip, Django and a Unix/MacOS or Windows Machine As an alternative to Docker, the project can be developed in a virtual environment for python. To create a virtual environment, decide on a name, e.g. env_name and create on like so in a folder above or aside the project folder: python3 -m venv env_name To activate the virtual environment on Unix or MacOS on a level above the environment folder that was just created: source env_name/bin/activate On Windows: env_name\\Scripts\\activate.bat With the virtual environment at hand (and activated), the requirements for the projects can now be installed manually only to this environment: pip install requirements/local.txt For more information on virtual environments, please refer to the Python 3 tutorial: https://docs.python.org/3/tutorial/venv.html","title":"Alternative: Virtual Environment for Python"},{"location":"02_Installation/#2-front-end-vuejs","text":"This app integrates with a Vue single page app (SPA) located in vue_frontend . To initialize the frontend, from the vue_frontend directory, run: npm install To serve the Vue frontend in hot-reloading development mode together with the back end : npm run serve And to build for deployment: npm run build","title":"2. Front end: Vue.js"},{"location":"02_Installation/#commands","text":"","title":"Commands"},{"location":"02_Installation/#execute-management-commands","text":"As with any shell command that we wish to run in our container, this is done using the docker-compose -f local.yml run --rm command: docker-compose -f local.yml run --rm django python manage.py migrate docker-compose -f local.yml run --rm django python manage.py createsuperuser Here, django is the target service we are executing the commands against. More on Docker and local development can be found in \"LOCAL_DEV.rst\".","title":"Execute Management Commands"},{"location":"03_basics/","text":"Basics This page covers the overall basics of the project regarding the back end (Django) and the front end (Vue.js). The most important aspects to get started will be covered. More in-depth guides/knowledge for either of the parts is planned for a different page (tbd). Back end (Django) Model-View-Template (MVT) Django is following the Model-View-Template structure, where the Model is for structuring and manipulating the data of the application, the view implements the business logic and the templates serves the views to the clients. In this project, the templates are rendering the static files provided by the webpack bundling, that are moved into the static folder after executing npm run build inside the vue_frontend directory. Model The model of the application is to be found in the respective models.py file. See https://docs.djangoproject.com/en/3.2/topics/db/models for documentation on how to create Models and available Fields. All of the data of the model instances are saved to a PostgreSQL Database. Postgres integrates well with Django and Django even supports some fields exclusively for Postgres. See https://docs.djangoproject.com/en/3.2/ref/contrib/postgres/ View The view implements the business logic of the application. In the patients/api/views.py , the REST API endpoints are defined. The most important endpoints that are exposed as of the end of the thesis are: Endpoint Actions (REST) Description /api/patients/ GET, POST List view of all patients /api/patients/id/ GET, PUT, PATCH, DELETE Detail view of a single patient /api/reports/ GET, POST List view of all reports /api/reports/id/ GET, PUT, PATCH, DELETE Detail view of a single report /rest-auth/login/ POST Login with username and password /rest-auth/logout/ POST Logout and delete token /rest-auth/user/ GET Retrieve user information A full documentation of all available endpoints as well as an interactive demo of the endpoints can be obtained from the endpoint /swagger . Curl commands can be interactively executed on the page and requests and responses can be analysed. The fields, that are to be included (or excluded) in the respective JSON responses are defined in the patients/api/serializers.py file. With the WebSocket integration, the endpoints for WebSocket requests are defined like so: Stream Consumer Model Actions (REST-like) patients PatientConsumer Patient List, Retrieve, Create, Patch, Update, Delete reports ReportConsumer Report List, Retrieve, Create, Patch, Update, Delete history HistoryConsumer HistoricalReport List, Retrieve, Patch, Update, Delete The endpoints are defined in the asgi.py file of the Project. For more information see Routing . Template Routing The following code snippet from the asgi.py file shows the ProtocolTypeRouter that routes the HTTP and WebSocket requests according to their protocol types: application = ProtocolTypeRouter ({ \"http\" : get_asgi_application (), \"websocket\" : TokenAuthMiddlewareStack ( URLRouter ( [ re_path ( r \"^ws/$\" , AsyncJsonWebsocketDemultiplexer ( patients = PatientConsumer () . as_asgi (), reports = ReportConsumer () . as_asgi (), history = HistoryConsumer () . as_asgi (), ) . as_asgi ()), ] ) ), }) The streams are defined inside the Demultiplexer and connected to their respective consumer (see Consumer ). REST API The REST API endpoints are defined as described before (see View ). An endpoint definition consists of several files: patients/models.py patients/api/serializers.py patients/api/views.py patients/api/urls.py The files are to be created/updated in the order shown above. The model is the first thing, as it is the base to what will be possible to expose via an API endpoint. The serializer defines which fields are to be included or excluded into the serialized JSON response and is based on the model. The view is handling the serialized JSON and able to add orderings to the data or filters. Besides the textual JSON output of every response, the Django REST Framework is also serving a browsable API with web pages, where one can create, update and delete model instances inside the browser. To be able to request the endpoints via the given URLs, the created Views have to be registered and named in the patients/api/urls.py file. Consumer Background Tasks Front end (Vue.js) Routing State-management Components","title":"Basics"},{"location":"03_basics/#basics","text":"This page covers the overall basics of the project regarding the back end (Django) and the front end (Vue.js). The most important aspects to get started will be covered. More in-depth guides/knowledge for either of the parts is planned for a different page (tbd).","title":"Basics"},{"location":"03_basics/#back-end-django","text":"","title":"Back end (Django)"},{"location":"03_basics/#model-view-template-mvt","text":"Django is following the Model-View-Template structure, where the Model is for structuring and manipulating the data of the application, the view implements the business logic and the templates serves the views to the clients. In this project, the templates are rendering the static files provided by the webpack bundling, that are moved into the static folder after executing npm run build inside the vue_frontend directory.","title":"Model-View-Template (MVT)"},{"location":"03_basics/#model","text":"The model of the application is to be found in the respective models.py file. See https://docs.djangoproject.com/en/3.2/topics/db/models for documentation on how to create Models and available Fields. All of the data of the model instances are saved to a PostgreSQL Database. Postgres integrates well with Django and Django even supports some fields exclusively for Postgres. See https://docs.djangoproject.com/en/3.2/ref/contrib/postgres/","title":"Model"},{"location":"03_basics/#view","text":"The view implements the business logic of the application. In the patients/api/views.py , the REST API endpoints are defined. The most important endpoints that are exposed as of the end of the thesis are: Endpoint Actions (REST) Description /api/patients/ GET, POST List view of all patients /api/patients/id/ GET, PUT, PATCH, DELETE Detail view of a single patient /api/reports/ GET, POST List view of all reports /api/reports/id/ GET, PUT, PATCH, DELETE Detail view of a single report /rest-auth/login/ POST Login with username and password /rest-auth/logout/ POST Logout and delete token /rest-auth/user/ GET Retrieve user information A full documentation of all available endpoints as well as an interactive demo of the endpoints can be obtained from the endpoint /swagger . Curl commands can be interactively executed on the page and requests and responses can be analysed. The fields, that are to be included (or excluded) in the respective JSON responses are defined in the patients/api/serializers.py file. With the WebSocket integration, the endpoints for WebSocket requests are defined like so: Stream Consumer Model Actions (REST-like) patients PatientConsumer Patient List, Retrieve, Create, Patch, Update, Delete reports ReportConsumer Report List, Retrieve, Create, Patch, Update, Delete history HistoryConsumer HistoricalReport List, Retrieve, Patch, Update, Delete The endpoints are defined in the asgi.py file of the Project. For more information see Routing .","title":"View"},{"location":"03_basics/#template","text":"","title":"Template"},{"location":"03_basics/#routing","text":"The following code snippet from the asgi.py file shows the ProtocolTypeRouter that routes the HTTP and WebSocket requests according to their protocol types: application = ProtocolTypeRouter ({ \"http\" : get_asgi_application (), \"websocket\" : TokenAuthMiddlewareStack ( URLRouter ( [ re_path ( r \"^ws/$\" , AsyncJsonWebsocketDemultiplexer ( patients = PatientConsumer () . as_asgi (), reports = ReportConsumer () . as_asgi (), history = HistoryConsumer () . as_asgi (), ) . as_asgi ()), ] ) ), }) The streams are defined inside the Demultiplexer and connected to their respective consumer (see Consumer ).","title":"Routing"},{"location":"03_basics/#rest-api","text":"The REST API endpoints are defined as described before (see View ). An endpoint definition consists of several files: patients/models.py patients/api/serializers.py patients/api/views.py patients/api/urls.py The files are to be created/updated in the order shown above. The model is the first thing, as it is the base to what will be possible to expose via an API endpoint. The serializer defines which fields are to be included or excluded into the serialized JSON response and is based on the model. The view is handling the serialized JSON and able to add orderings to the data or filters. Besides the textual JSON output of every response, the Django REST Framework is also serving a browsable API with web pages, where one can create, update and delete model instances inside the browser. To be able to request the endpoints via the given URLs, the created Views have to be registered and named in the patients/api/urls.py file.","title":"REST API"},{"location":"03_basics/#consumer","text":"","title":"Consumer"},{"location":"03_basics/#background-tasks","text":"","title":"Background Tasks"},{"location":"03_basics/#front-end-vuejs","text":"","title":"Front end (Vue.js)"},{"location":"03_basics/#routing_1","text":"","title":"Routing"},{"location":"03_basics/#state-management","text":"","title":"State-management"},{"location":"03_basics/#components","text":"","title":"Components"},{"location":"04_backend/","text":"Back end This page shall provide more in-depth information on the structure of the back end and it's most important files. Structure The back end is structured in a way, that distinguishes between a local development environment and a production environment. Therefore some files such as the Dockerfile (see Installation ) are available twice. Depending on the environment, the respective files should either be used or are used automatically. Files marked with the word base such as config/settings/base.py - as the name suggests - serve as a base for both, the local and the production environment. Local ... Production The most important difference between the local and the production environment are the environment variables . Not only, but mostly sensitive information is stored in environment variables and will not be exported from a local environment to a production environment. Therefore these environment variables have to be set in the production environment. It is suggested not to hardcode values for such variables into the code for production, but to really set and use environment variables. ... Test C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Back end"},{"location":"04_backend/#back-end","text":"This page shall provide more in-depth information on the structure of the back end and it's most important files.","title":"Back end"},{"location":"04_backend/#structure","text":"The back end is structured in a way, that distinguishes between a local development environment and a production environment. Therefore some files such as the Dockerfile (see Installation ) are available twice. Depending on the environment, the respective files should either be used or are used automatically. Files marked with the word base such as config/settings/base.py - as the name suggests - serve as a base for both, the local and the production environment.","title":"Structure"},{"location":"04_backend/#local","text":"...","title":"Local"},{"location":"04_backend/#production","text":"The most important difference between the local and the production environment are the environment variables . Not only, but mostly sensitive information is stored in environment variables and will not be exported from a local environment to a production environment. Therefore these environment variables have to be set in the production environment. It is suggested not to hardcode values for such variables into the code for production, but to really set and use environment variables. ...","title":"Production"},{"location":"04_backend/#test","text":"C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Test"},{"location":"05_frontend/","text":"Front end This page shall provide more in-depth information on the structure of the front end and it's most important files.","title":"Front end"},{"location":"05_frontend/#front-end","text":"This page shall provide more in-depth information on the structure of the front end and it's most important files.","title":"Front end"},{"location":"06_faq/","text":"Frequently Asked Questions How to approach the project? The general structure of the project is divided into two parts: back end and front end. The back end is made with Django, a web framework based on python . The front end is made with Vue.js. Vue.js consists of JavaScript, HTML and CSS. Both, Django and Vue.js are fairly easy to learn. Back end / Django First of all, the Django project itself is providing useful resources to get started with Django: Django Project For this project, for django a good start would also be the documentation of the Django REST Framework , as the back end provides an API for different applications. See Django REST Framework The Dengue Dashboard in particular is based on being a real-time web-application and therefore uses a full-duplex communication between the server and the client. That means that both, client and server, may always send each other messages after an initial connection is established. That couldn't be provided with normal HTTP REST communication as previous mentioned. For this purpose, the WebSocket protocol was implemented into the project, which made it necessary to implement Django Channels , that enables channeling the different protocols (HTTP/WebSockets). An incredibly useful article , to understand the structure of this project and the overview of handling different protocols in a real-time environment is to be found here: https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django . It is written by one of the core developers of Django and not only helps to understand the structure of this project, but also visualizes the concepts of Django Channels. To serve the API via WebSockets , the Django Channels REST Framework was used. In general, it is possible and common to serve .html files from the Django Templates folder. You can write html and specific Django syntax to render pages that will be served to the client. For this project however, Vue.js is used to create the files for the front end and display information to the client. The reason for this is, that Vue.js is a reactive JavaScript framework. It enables automatic updating of the page/DOM in case of updates to the data that is being displayed. Furthermore, with a JavaScript framework like this, it is possible to separate the data from it's representation. The front end is solely developed in the vue_frontend directory, whilst all of the other folders are connected to the back end. Besides Django, the back end also includes other frameworks/technologies that are e.g. used for deployment. To fully understand the files of the back end, one could look at the following technologies, that are used: Python Django (as a web framework based on python) Docker/Dockerfiles Shell Scripts Markdown (for Documentation purposes mostly) pip (package manager to install python packages) JSON Knowledge of the terminal Front end / Vue.js The front end of the application is developed with Vue.js. The main reason besides the separation of content and representation is the reactivity. Through state-management it is possible, that the DOM automatically refreshes whenever changes to the represented data is made. This enhances the real-time feature of the web-application. Vue has got several other advantages such as that it is light-weighted and incrementally adoptable, thus scalable. A good starting point for Vue.js is the project website itself. Vue.js is open-source and well-documented. https://vuejs.org/v2/guide/ To connect with the aforementioned WebSocket provided by the Django Channels REST Framework, a client side implementation is used. The maybe most important part in the front end implementation is the state-management. Vuex is a state-management pattern and library for Vue.js. The documentation for vuex delivers a good explanation of what vuex is and how it works. https://vuex.vuejs.org/ The following diagram gives a brief overview over the vuex state-management pattern from the aforementioned website. To fully understand the files of the front end, one could look at the following technologies: JavaScript HTML CSS Bootstrap (as a CSS framework that is used in the front end template) npm (package manager to install javascript packages) Vue.js Vuex (state-management) Single Page Applications WebPack (Bundling files into static assets) JSON Developer Tools of your Browser of Choice (Chrome or Firefox are recommended) Which IDE is recommended? I would recommend PyCharm Professional. It is a powerful IDE for Python development but with support for Vue.js and comes with rich features regarding project navigation, highlighting, code completion, TODO management, integrated terminal or python console etc. It is developed by JetBrains and free of charge for students. Great and useful features for a project this size, are: Structure view: Cmd+7 (Mac) / Alt+7 (Win) Find file by name: Shift+Cmd+O (Mac) / Ctrl+F12 (Win) Find in files: Shift+Cmd+F (Mac) / Ctrl+Shift+F (Win) All Shortcuts for Win/Linux: https://resources.jetbrains.com/storage/products/pycharm/docs/PyCharm_ReferenceCard.pdf All Shortcuts for MacOS: https://resources.jetbrains.com/storage/products/pycharm/docs/PyCharm_ReferenceCard_mac.pdf localhost:8000 is not showing the app. You started Docker but localhost:8000 is not showing the App? There is a couple of things that could be wrong here. Front end is not up and running First of all, make sure, that the front end is being served. You can achieve this by running npm install once and then npm run serve inside the vue_frontend directory of the project. npm run serve will serve the front end and enable hot reloading, which means that all changes made to the code will automatically refresh the page in the browser after saving the file. Cache is broken The app is made to make as little requests as necessary. That means, if some JavaScript or CSS file that is needed for the page was already loaded into the cache once, the page will most likely not request the same file again unless the file is marked as modified. This is one reason, why the webpack configuration, that bundles the front end .vue files to static .js and .css files generates a unique hash that is appended to every file. The files will be renewed in the browser after every build process. In local development however, the development cycle might lead to a broken cache, i.e. a cache, where files are mistaken to be the newest when they aren't. The easiest way to verify if that is the problem you are encountering is to delete the cached files or to see if the problem persists in a private window. Personal experience showed, that these caching problems in local development rarely occur, when building the project with npm run build after a developing session. Serving in the wrong location The standard port of local development for Vue.js is :8080 whereas the Docker will serve on port :8000 . Both will work, but localhost:8000 is preferable and used throughout the application. Depending on your system/machine it is possible, that localhost or 0.0.0.0 or 127.0.0.1 is not the IP that your Docker instance is serving the app on. Another possibility is, that the ports are not available to your host system or blocked by the firewall. Vue.js will usually automatically turn to another port then but in cases might not. So for debugging, you might follow these steps: https://stackoverflow.com/questions/46176584/docker-bind-for-0-0-0-04000-failed-port-is-already-allocated Check your firewall settings for the ports Check the IP/Port of your docker process(es) When you encounter another IP than any of the localhost IPs, it is important to whitelist them in the django app ( ALLOWED_HOSTS ) and also to exchange all strings containing the localhost URL to your new IP. The ALLOWED_HOSTS can e.g. be altered in config/settings/local.py . More information on ALLOWED_HOSTS: https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts Problems with deploying Coming soon ...","title":"Frequently Asked Questions"},{"location":"06_faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"06_faq/#how-to-approach-the-project","text":"The general structure of the project is divided into two parts: back end and front end. The back end is made with Django, a web framework based on python . The front end is made with Vue.js. Vue.js consists of JavaScript, HTML and CSS. Both, Django and Vue.js are fairly easy to learn.","title":"How to approach the project?"},{"location":"06_faq/#back-end-django","text":"First of all, the Django project itself is providing useful resources to get started with Django: Django Project For this project, for django a good start would also be the documentation of the Django REST Framework , as the back end provides an API for different applications. See Django REST Framework The Dengue Dashboard in particular is based on being a real-time web-application and therefore uses a full-duplex communication between the server and the client. That means that both, client and server, may always send each other messages after an initial connection is established. That couldn't be provided with normal HTTP REST communication as previous mentioned. For this purpose, the WebSocket protocol was implemented into the project, which made it necessary to implement Django Channels , that enables channeling the different protocols (HTTP/WebSockets). An incredibly useful article , to understand the structure of this project and the overview of handling different protocols in a real-time environment is to be found here: https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django . It is written by one of the core developers of Django and not only helps to understand the structure of this project, but also visualizes the concepts of Django Channels. To serve the API via WebSockets , the Django Channels REST Framework was used. In general, it is possible and common to serve .html files from the Django Templates folder. You can write html and specific Django syntax to render pages that will be served to the client. For this project however, Vue.js is used to create the files for the front end and display information to the client. The reason for this is, that Vue.js is a reactive JavaScript framework. It enables automatic updating of the page/DOM in case of updates to the data that is being displayed. Furthermore, with a JavaScript framework like this, it is possible to separate the data from it's representation. The front end is solely developed in the vue_frontend directory, whilst all of the other folders are connected to the back end. Besides Django, the back end also includes other frameworks/technologies that are e.g. used for deployment. To fully understand the files of the back end, one could look at the following technologies, that are used: Python Django (as a web framework based on python) Docker/Dockerfiles Shell Scripts Markdown (for Documentation purposes mostly) pip (package manager to install python packages) JSON Knowledge of the terminal","title":"Back end / Django"},{"location":"06_faq/#front-end-vuejs","text":"The front end of the application is developed with Vue.js. The main reason besides the separation of content and representation is the reactivity. Through state-management it is possible, that the DOM automatically refreshes whenever changes to the represented data is made. This enhances the real-time feature of the web-application. Vue has got several other advantages such as that it is light-weighted and incrementally adoptable, thus scalable. A good starting point for Vue.js is the project website itself. Vue.js is open-source and well-documented. https://vuejs.org/v2/guide/ To connect with the aforementioned WebSocket provided by the Django Channels REST Framework, a client side implementation is used. The maybe most important part in the front end implementation is the state-management. Vuex is a state-management pattern and library for Vue.js. The documentation for vuex delivers a good explanation of what vuex is and how it works. https://vuex.vuejs.org/ The following diagram gives a brief overview over the vuex state-management pattern from the aforementioned website. To fully understand the files of the front end, one could look at the following technologies: JavaScript HTML CSS Bootstrap (as a CSS framework that is used in the front end template) npm (package manager to install javascript packages) Vue.js Vuex (state-management) Single Page Applications WebPack (Bundling files into static assets) JSON Developer Tools of your Browser of Choice (Chrome or Firefox are recommended)","title":"Front end / Vue.js"},{"location":"06_faq/#which-ide-is-recommended","text":"I would recommend PyCharm Professional. It is a powerful IDE for Python development but with support for Vue.js and comes with rich features regarding project navigation, highlighting, code completion, TODO management, integrated terminal or python console etc. It is developed by JetBrains and free of charge for students. Great and useful features for a project this size, are: Structure view: Cmd+7 (Mac) / Alt+7 (Win) Find file by name: Shift+Cmd+O (Mac) / Ctrl+F12 (Win) Find in files: Shift+Cmd+F (Mac) / Ctrl+Shift+F (Win) All Shortcuts for Win/Linux: https://resources.jetbrains.com/storage/products/pycharm/docs/PyCharm_ReferenceCard.pdf All Shortcuts for MacOS: https://resources.jetbrains.com/storage/products/pycharm/docs/PyCharm_ReferenceCard_mac.pdf","title":"Which IDE is recommended?"},{"location":"06_faq/#localhost8000-is-not-showing-the-app","text":"You started Docker but localhost:8000 is not showing the App? There is a couple of things that could be wrong here. Front end is not up and running First of all, make sure, that the front end is being served. You can achieve this by running npm install once and then npm run serve inside the vue_frontend directory of the project. npm run serve will serve the front end and enable hot reloading, which means that all changes made to the code will automatically refresh the page in the browser after saving the file. Cache is broken The app is made to make as little requests as necessary. That means, if some JavaScript or CSS file that is needed for the page was already loaded into the cache once, the page will most likely not request the same file again unless the file is marked as modified. This is one reason, why the webpack configuration, that bundles the front end .vue files to static .js and .css files generates a unique hash that is appended to every file. The files will be renewed in the browser after every build process. In local development however, the development cycle might lead to a broken cache, i.e. a cache, where files are mistaken to be the newest when they aren't. The easiest way to verify if that is the problem you are encountering is to delete the cached files or to see if the problem persists in a private window. Personal experience showed, that these caching problems in local development rarely occur, when building the project with npm run build after a developing session. Serving in the wrong location The standard port of local development for Vue.js is :8080 whereas the Docker will serve on port :8000 . Both will work, but localhost:8000 is preferable and used throughout the application. Depending on your system/machine it is possible, that localhost or 0.0.0.0 or 127.0.0.1 is not the IP that your Docker instance is serving the app on. Another possibility is, that the ports are not available to your host system or blocked by the firewall. Vue.js will usually automatically turn to another port then but in cases might not. So for debugging, you might follow these steps: https://stackoverflow.com/questions/46176584/docker-bind-for-0-0-0-04000-failed-port-is-already-allocated Check your firewall settings for the ports Check the IP/Port of your docker process(es) When you encounter another IP than any of the localhost IPs, it is important to whitelist them in the django app ( ALLOWED_HOSTS ) and also to exchange all strings containing the localhost URL to your new IP. The ALLOWED_HOSTS can e.g. be altered in config/settings/local.py . More information on ALLOWED_HOSTS: https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts","title":"localhost:8000 is not showing the app."},{"location":"06_faq/#problems-with-deploying","text":"Coming soon ...","title":"Problems with deploying"},{"location":"07_Resources/","text":"Resources Frameworks, Libraries & other Resources Django Background Tasks https://github.com/arteria/django-background-tasks Documentation of the Vue Argon Dashboard Template https://github.com/creativetimofficial/vue-argon-dashboard Django Postgres Documentation https://docs.djangoproject.com/en/3.1/ref/contrib/postgres/ Django Security Documentation https://docs.djangoproject.com/en/3.1/topics/security/ Django Documentation https://www.djangoproject.com/ Django Channels https://channels.readthedocs.io/en/stable/ Django Channel Layers https://channels.readthedocs.io/en/stable/topics/channel_layers.html Django REST Framework https://www.django-rest-framework.org/ WebSocket Protocol https://tools.ietf.org/html/rfc6455 Django Channels REST Framework Client https://github.com/theY4Kman/dcrf-client Redis https://redis.io/ PostgreSQL https://www.postgresql.org/ Vuex PersistedState https://github.com/robinvdvleuten/vuex-persistedstate Vue Router https://router.vuejs.org/ Vue.js https://vuejs.org/ Vuex https://vuex.vuejs.org/#what-is-a-state-management-pattern Django Channels REST Framework https://github.com/hishnash/djangochannelsrestframework WebPack https://webpack.js.org/","title":"Resources"},{"location":"07_Resources/#resources","text":"","title":"Resources"},{"location":"07_Resources/#frameworks-libraries-other-resources","text":"Django Background Tasks https://github.com/arteria/django-background-tasks Documentation of the Vue Argon Dashboard Template https://github.com/creativetimofficial/vue-argon-dashboard Django Postgres Documentation https://docs.djangoproject.com/en/3.1/ref/contrib/postgres/ Django Security Documentation https://docs.djangoproject.com/en/3.1/topics/security/ Django Documentation https://www.djangoproject.com/ Django Channels https://channels.readthedocs.io/en/stable/ Django Channel Layers https://channels.readthedocs.io/en/stable/topics/channel_layers.html Django REST Framework https://www.django-rest-framework.org/ WebSocket Protocol https://tools.ietf.org/html/rfc6455 Django Channels REST Framework Client https://github.com/theY4Kman/dcrf-client Redis https://redis.io/ PostgreSQL https://www.postgresql.org/ Vuex PersistedState https://github.com/robinvdvleuten/vuex-persistedstate Vue Router https://router.vuejs.org/ Vue.js https://vuejs.org/ Vuex https://vuex.vuejs.org/#what-is-a-state-management-pattern Django Channels REST Framework https://github.com/hishnash/djangochannelsrestframework WebPack https://webpack.js.org/","title":"Frameworks, Libraries &amp; other Resources"},{"location":"Changelog/","text":"Changelog Dengue Dashboard Docs v1.0.0 - May 9, 2021 Create About page Create FAQ page Create Installation page Create Resources page Create Basics page Create Changelog page","title":"Changelog"},{"location":"Changelog/#changelog","text":"","title":"Changelog"},{"location":"Changelog/#dengue-dashboard-docs","text":"","title":"Dengue Dashboard Docs"},{"location":"Changelog/#v100-may-9-2021","text":"Create About page Create FAQ page Create Installation page Create Resources page Create Basics page Create Changelog page","title":"v1.0.0 - May 9, 2021"}]}